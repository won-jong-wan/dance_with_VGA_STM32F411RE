
dance_with_VGA_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e4  080063e4  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ec  080063ec  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ec  080063ec  000073ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080063f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009930  2000006c  08006460  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000999c  08006460  0000899c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feef  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240a  00000000  00000000  00017f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c67  00000000  00000000  0001b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d16  00000000  00000000  0001bf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ab0  00000000  00000000  00033cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922a0  00000000  00000000  00045765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7a05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a38  00000000  00000000  000d7a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dc480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ee0 	.word	0x08005ee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005ee0 	.word	0x08005ee0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <draw_scaled_char>:
 * @param y: 화면상 Y 좌표 (0~479)
 * @param scale_x: X축 스케일 배수
 * @param scale_y: Y축 스케일 배수
 */
void draw_scaled_char(const uint8_t* font_data, uint8_t font_height,
                     uint16_t x, uint16_t y, uint8_t scale_x, uint8_t scale_y) {
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4603      	mov	r3, r0
 80005bc:	72fb      	strb	r3, [r7, #11]
 80005be:	460b      	mov	r3, r1
 80005c0:	813b      	strh	r3, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	80fb      	strh	r3, [r7, #6]

    // 경계 검사
    if (x >= 640 || y >= 480) return;
 80005c6:	893b      	ldrh	r3, [r7, #8]
 80005c8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80005cc:	f080 80dd 	bcs.w	800078a <draw_scaled_char+0x1de>
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80005d6:	f080 80d8 	bcs.w	800078a <draw_scaled_char+0x1de>

    uint16_t scaled_width = 8 * scale_x;
 80005da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80005de:	b29b      	uxth	r3, r3
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t scaled_height = font_height * scale_y;
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	fb12 f303 	smulbb	r3, r2, r3
 80005f2:	843b      	strh	r3, [r7, #32]

    // 화면을 벗어나는 경우 클리핑
    if (x + scaled_width > 640) scaled_width = 640 - x;
 80005f4:	893a      	ldrh	r2, [r7, #8]
 80005f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80005f8:	4413      	add	r3, r2
 80005fa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80005fe:	dd03      	ble.n	8000608 <draw_scaled_char+0x5c>
 8000600:	893b      	ldrh	r3, [r7, #8]
 8000602:	f5c3 7320 	rsb	r3, r3, #640	@ 0x280
 8000606:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (y + scaled_height > 480) scaled_height = 480 - y;
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	8c3b      	ldrh	r3, [r7, #32]
 800060c:	4413      	add	r3, r2
 800060e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000612:	dd03      	ble.n	800061c <draw_scaled_char+0x70>
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 800061a:	843b      	strh	r3, [r7, #32]

    // 각 원본 픽셀을 스케일링하여 그리기
    for (uint8_t row = 0; row < font_height && (y + row * scale_y) < 480; row++) {
 800061c:	2300      	movs	r3, #0
 800061e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000622:	e0a0      	b.n	8000766 <draw_scaled_char+0x1ba>
        uint8_t font_byte = font_data[row];
 8000624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	77fb      	strb	r3, [r7, #31]

        // Y축 스케일링
        for (uint8_t sy = 0; sy < scale_y && (y + row * scale_y + sy) < 480; sy++) {
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000636:	e07c      	b.n	8000732 <draw_scaled_char+0x186>
            uint16_t target_y = y + row * scale_y + sy;
 8000638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800063c:	b29a      	uxth	r2, r3
 800063e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000642:	b29b      	uxth	r3, r3
 8000644:	fb12 f303 	smulbb	r3, r2, r3
 8000648:	b29a      	uxth	r2, r3
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	4413      	add	r3, r2
 800064e:	b29a      	uxth	r2, r3
 8000650:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000654:	b29b      	uxth	r3, r3
 8000656:	4413      	add	r3, r2
 8000658:	83bb      	strh	r3, [r7, #28]

            // 8개 픽셀을 각각 처리
            for (uint8_t bit = 0; bit < 8; bit++) {
 800065a:	2300      	movs	r3, #0
 800065c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000660:	e05e      	b.n	8000720 <draw_scaled_char+0x174>
                if (font_byte & (0x80 >> bit)) { // 해당 비트가 1이면
 8000662:	7ffa      	ldrb	r2, [r7, #31]
 8000664:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	fa41 f303 	asr.w	r3, r1, r3
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d050      	beq.n	8000716 <draw_scaled_char+0x16a>
                    uint16_t pixel_x = x + bit * scale_x;
 8000674:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000678:	b29a      	uxth	r2, r3
 800067a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800067e:	b29b      	uxth	r3, r3
 8000680:	fb12 f303 	smulbb	r3, r2, r3
 8000684:	b29a      	uxth	r2, r3
 8000686:	893b      	ldrh	r3, [r7, #8]
 8000688:	4413      	add	r3, r2
 800068a:	837b      	strh	r3, [r7, #26]

                    // X축 스케일링
                    for (uint8_t sx = 0; sx < scale_x && (pixel_x + sx) < 640; sx++) {
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000692:	e033      	b.n	80006fc <draw_scaled_char+0x150>
                        uint16_t target_x = pixel_x + sx;
 8000694:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000698:	b29a      	uxth	r2, r3
 800069a:	8b7b      	ldrh	r3, [r7, #26]
 800069c:	4413      	add	r3, r2
 800069e:	833b      	strh	r3, [r7, #24]
                        uint8_t byte_idx = target_x / 8;
 80006a0:	8b3b      	ldrh	r3, [r7, #24]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	75fb      	strb	r3, [r7, #23]
                        uint8_t bit_idx = 7 - (target_x % 8);
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	75bb      	strb	r3, [r7, #22]

                        fb[target_y][byte_idx] |= (1 << bit_idx);
 80006b6:	8bba      	ldrh	r2, [r7, #28]
 80006b8:	7df9      	ldrb	r1, [r7, #23]
 80006ba:	4836      	ldr	r0, [pc, #216]	@ (8000794 <draw_scaled_char+0x1e8>)
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4403      	add	r3, r0
 80006c6:	440b      	add	r3, r1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	7dbb      	ldrb	r3, [r7, #22]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	7df9      	ldrb	r1, [r7, #23]
 80006de:	b2dc      	uxtb	r4, r3
 80006e0:	482c      	ldr	r0, [pc, #176]	@ (8000794 <draw_scaled_char+0x1e8>)
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4403      	add	r3, r0
 80006ec:	440b      	add	r3, r1
 80006ee:	4622      	mov	r2, r4
 80006f0:	701a      	strb	r2, [r3, #0]
                    for (uint8_t sx = 0; sx < scale_x && (pixel_x + sx) < 640; sx++) {
 80006f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006f6:	3301      	adds	r3, #1
 80006f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80006fc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000700:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000704:	429a      	cmp	r2, r3
 8000706:	d206      	bcs.n	8000716 <draw_scaled_char+0x16a>
 8000708:	8b7a      	ldrh	r2, [r7, #26]
 800070a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800070e:	4413      	add	r3, r2
 8000710:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000714:	dbbe      	blt.n	8000694 <draw_scaled_char+0xe8>
            for (uint8_t bit = 0; bit < 8; bit++) {
 8000716:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800071a:	3301      	adds	r3, #1
 800071c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000720:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000724:	2b07      	cmp	r3, #7
 8000726:	d99c      	bls.n	8000662 <draw_scaled_char+0xb6>
        for (uint8_t sy = 0; sy < scale_y && (y + row * scale_y + sy) < 480; sy++) {
 8000728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800072c:	3301      	adds	r3, #1
 800072e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000732:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000736:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800073a:	429a      	cmp	r2, r3
 800073c:	d20e      	bcs.n	800075c <draw_scaled_char+0x1b0>
 800073e:	88fa      	ldrh	r2, [r7, #6]
 8000740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000744:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 8000748:	fb01 f303 	mul.w	r3, r1, r3
 800074c:	441a      	add	r2, r3
 800074e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000752:	4413      	add	r3, r2
 8000754:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000758:	f6ff af6e 	blt.w	8000638 <draw_scaled_char+0x8c>
    for (uint8_t row = 0; row < font_height && (y + row * scale_y) < 480; row++) {
 800075c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000760:	3301      	adds	r3, #1
 8000762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000766:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	429a      	cmp	r2, r3
 800076e:	d20d      	bcs.n	800078c <draw_scaled_char+0x1e0>
 8000770:	88fa      	ldrh	r2, [r7, #6]
 8000772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000776:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 800077a:	fb01 f303 	mul.w	r3, r1, r3
 800077e:	4413      	add	r3, r2
 8000780:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000784:	f6ff af4e 	blt.w	8000624 <draw_scaled_char+0x78>
 8000788:	e000      	b.n	800078c <draw_scaled_char+0x1e0>
    if (x >= 640 || y >= 480) return;
 800078a:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bc90      	pop	{r4, r7}
 8000792:	4770      	bx	lr
 8000794:	2000022c 	.word	0x2000022c

08000798 <draw_scaled_char_fast>:

/**
 * 최적화된 버전 - 정수 스케일링만 지원 (더 빠름)
 */
void draw_scaled_char_fast(const uint8_t* font_data, uint8_t font_height,
                          uint16_t x, uint16_t y, uint8_t scale) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08d      	sub	sp, #52	@ 0x34
 800079c:	af02      	add	r7, sp, #8
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	72fb      	strb	r3, [r7, #11]
 80007aa:	460b      	mov	r3, r1
 80007ac:	813b      	strh	r3, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	80fb      	strh	r3, [r7, #6]

    if (x >= 640 || y >= 480 || scale == 0) return;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80007b8:	f080 80cd 	bcs.w	8000956 <draw_scaled_char_fast+0x1be>
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80007c2:	f080 80c8 	bcs.w	8000956 <draw_scaled_char_fast+0x1be>
 80007c6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 80c3 	beq.w	8000956 <draw_scaled_char_fast+0x1be>

    // 사전 계산
    uint16_t scaled_width = 8 * scale;
 80007d0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t scaled_height = font_height * scale;
 80007da:	7afb      	ldrb	r3, [r7, #11]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	fb12 f303 	smulbb	r3, r2, r3
 80007e8:	843b      	strh	r3, [r7, #32]

    if (x + scaled_width > 640 || y + scaled_height > 480) {
 80007ea:	893a      	ldrh	r2, [r7, #8]
 80007ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80007ee:	4413      	add	r3, r2
 80007f0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80007f4:	dc05      	bgt.n	8000802 <draw_scaled_char_fast+0x6a>
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	8c3b      	ldrh	r3, [r7, #32]
 80007fa:	4413      	add	r3, r2
 80007fc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000800:	dd0d      	ble.n	800081e <draw_scaled_char_fast+0x86>
        // 경계를 벗어나면 일반 함수 호출
        draw_scaled_char(font_data, font_height, x, y, scale, scale);
 8000802:	88f8      	ldrh	r0, [r7, #6]
 8000804:	893a      	ldrh	r2, [r7, #8]
 8000806:	7af9      	ldrb	r1, [r7, #11]
 8000808:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	4603      	mov	r3, r0
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fec8 	bl	80005ac <draw_scaled_char>
        return;
 800081c:	e09c      	b.n	8000958 <draw_scaled_char_fast+0x1c0>
    }

    // 경계 체크가 필요없는 최적화된 루프
    for (uint8_t row = 0; row < font_height; row++) {
 800081e:	2300      	movs	r3, #0
 8000820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000824:	e090      	b.n	8000948 <draw_scaled_char_fast+0x1b0>
        uint8_t font_byte = font_data[row];
 8000826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	77fb      	strb	r3, [r7, #31]

        if (font_byte == 0) {
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8081 	beq.w	800093c <draw_scaled_char_fast+0x1a4>
            // 빈 행은 건너뛰기
            continue;
        }

        for (uint8_t sy = 0; sy < scale; sy++) {
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000840:	e075      	b.n	800092e <draw_scaled_char_fast+0x196>
            uint16_t target_y = y + row * scale + sy;
 8000842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000846:	b29a      	uxth	r2, r3
 8000848:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800084c:	b29b      	uxth	r3, r3
 800084e:	fb12 f303 	smulbb	r3, r2, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	4413      	add	r3, r2
 8000858:	b29a      	uxth	r2, r3
 800085a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800085e:	b29b      	uxth	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	83bb      	strh	r3, [r7, #28]

            for (uint8_t bit = 0; bit < 8; bit++) {
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800086a:	e057      	b.n	800091c <draw_scaled_char_fast+0x184>
                if (font_byte & (0x80 >> bit)) {
 800086c:	7ffa      	ldrb	r2, [r7, #31]
 800086e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	fa41 f303 	asr.w	r3, r1, r3
 8000878:	4013      	ands	r3, r2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d049      	beq.n	8000912 <draw_scaled_char_fast+0x17a>
                    uint16_t pixel_x = x + bit * scale;
 800087e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000882:	b29a      	uxth	r2, r3
 8000884:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000888:	b29b      	uxth	r3, r3
 800088a:	fb12 f303 	smulbb	r3, r2, r3
 800088e:	b29a      	uxth	r2, r3
 8000890:	893b      	ldrh	r3, [r7, #8]
 8000892:	4413      	add	r3, r2
 8000894:	837b      	strh	r3, [r7, #26]

                    // 스케일된 픽셀 블록 그리기
                    for (uint8_t sx = 0; sx < scale; sx++) {
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800089c:	e033      	b.n	8000906 <draw_scaled_char_fast+0x16e>
                        uint16_t target_x = pixel_x + sx;
 800089e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	8b7b      	ldrh	r3, [r7, #26]
 80008a6:	4413      	add	r3, r2
 80008a8:	833b      	strh	r3, [r7, #24]
                        uint8_t byte_idx = target_x >> 3; // /8과 동일하지만 더 빠름
 80008aa:	8b3b      	ldrh	r3, [r7, #24]
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	75fb      	strb	r3, [r7, #23]
                        uint8_t bit_idx = 7 - (target_x & 7); // %8과 동일하지만 더 빠름
 80008b2:	8b3b      	ldrh	r3, [r7, #24]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	75bb      	strb	r3, [r7, #22]

                        fb[target_y][byte_idx] |= (1 << bit_idx);
 80008c0:	8bba      	ldrh	r2, [r7, #28]
 80008c2:	7df9      	ldrb	r1, [r7, #23]
 80008c4:	4826      	ldr	r0, [pc, #152]	@ (8000960 <draw_scaled_char_fast+0x1c8>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4403      	add	r3, r0
 80008d0:	440b      	add	r3, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25a      	sxtb	r2, r3
 80008d6:	7dbb      	ldrb	r3, [r7, #22]
 80008d8:	2101      	movs	r1, #1
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	8bba      	ldrh	r2, [r7, #28]
 80008e6:	7df9      	ldrb	r1, [r7, #23]
 80008e8:	b2dc      	uxtb	r4, r3
 80008ea:	481d      	ldr	r0, [pc, #116]	@ (8000960 <draw_scaled_char_fast+0x1c8>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4403      	add	r3, r0
 80008f6:	440b      	add	r3, r1
 80008f8:	4622      	mov	r2, r4
 80008fa:	701a      	strb	r2, [r3, #0]
                    for (uint8_t sx = 0; sx < scale; sx++) {
 80008fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000900:	3301      	adds	r3, #1
 8000902:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000906:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800090a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800090e:	429a      	cmp	r2, r3
 8000910:	d3c5      	bcc.n	800089e <draw_scaled_char_fast+0x106>
            for (uint8_t bit = 0; bit < 8; bit++) {
 8000912:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000916:	3301      	adds	r3, #1
 8000918:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800091c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000920:	2b07      	cmp	r3, #7
 8000922:	d9a3      	bls.n	800086c <draw_scaled_char_fast+0xd4>
        for (uint8_t sy = 0; sy < scale; sy++) {
 8000924:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000928:	3301      	adds	r3, #1
 800092a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800092e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000932:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000936:	429a      	cmp	r2, r3
 8000938:	d383      	bcc.n	8000842 <draw_scaled_char_fast+0xaa>
 800093a:	e000      	b.n	800093e <draw_scaled_char_fast+0x1a6>
            continue;
 800093c:	bf00      	nop
    for (uint8_t row = 0; row < font_height; row++) {
 800093e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000942:	3301      	adds	r3, #1
 8000944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000948:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800094c:	7afb      	ldrb	r3, [r7, #11]
 800094e:	429a      	cmp	r2, r3
 8000950:	f4ff af69 	bcc.w	8000826 <draw_scaled_char_fast+0x8e>
 8000954:	e000      	b.n	8000958 <draw_scaled_char_fast+0x1c0>
    if (x >= 640 || y >= 480 || scale == 0) return;
 8000956:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8000958:	372c      	adds	r7, #44	@ 0x2c
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	bf00      	nop
 8000960:	2000022c 	.word	0x2000022c

08000964 <get_char_font>:
/**
 * 문자의 폰트 데이터를 가져오는 함수
 * @param ch: ASCII 문자
 * @return: 폰트 데이터 포인터 (없으면 NULL)
 */
const uint8_t* get_char_font(char ch) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    if (ch >= FONT_START_CHAR && ch <= FONT_END_CHAR) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b1f      	cmp	r3, #31
 8000972:	d90b      	bls.n	800098c <get_char_font+0x28>
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b5a      	cmp	r3, #90	@ 0x5a
 8000978:	d808      	bhi.n	800098c <get_char_font+0x28>
        return font_data[ch - FONT_START_CHAR];
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f1a3 0220 	sub.w	r2, r3, #32
 8000980:	4613      	mov	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <get_char_font+0x38>)
 8000988:	4413      	add	r3, r2
 800098a:	e000      	b.n	800098e <get_char_font+0x2a>
    }
    return NULL; // 지원하지 않는 문자
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	0800617c 	.word	0x0800617c

080009a0 <draw_char>:
 * @param x: X 좌표
 * @param y: Y 좌표
 * @param scale: 스케일 배수
 * @return: 그려진 문자의 폭 (다음 문자 위치 계산용)
 */
uint16_t draw_char(char ch, uint16_t x, uint16_t y, uint8_t scale) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	71bb      	strb	r3, [r7, #6]
    const uint8_t* char_font = get_char_font(ch);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffcf 	bl	8000964 <get_char_font>
 80009c6:	60f8      	str	r0, [r7, #12]
    if (char_font == NULL) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <draw_char+0x38>
        // 지원하지 않는 문자는 공백으로 처리
        return FONT_WIDTH * scale;
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	e00c      	b.n	80009f2 <draw_char+0x52>
    }

    draw_scaled_char_fast(char_font, FONT_HEIGHT, x, y, scale);
 80009d8:	8879      	ldrh	r1, [r7, #2]
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	460b      	mov	r3, r1
 80009e2:	2109      	movs	r1, #9
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fed7 	bl	8000798 <draw_scaled_char_fast>
    return FONT_WIDTH * scale;
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	b29b      	uxth	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}

080009fa <draw_string>:
 * @param x: 시작 X 좌표
 * @param y: 시작 Y 좌표
 * @param scale: 스케일 배수
 * @return: 그려진 문자열의 총 폭
 */
uint16_t draw_string(const char* str, uint16_t x, uint16_t y, uint8_t scale) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	4608      	mov	r0, r1
 8000a04:	4611      	mov	r1, r2
 8000a06:	461a      	mov	r2, r3
 8000a08:	4603      	mov	r3, r0
 8000a0a:	817b      	strh	r3, [r7, #10]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	813b      	strh	r3, [r7, #8]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71fb      	strb	r3, [r7, #7]
    if (str == NULL || scale == 0) return 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <draw_string+0x26>
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <draw_string+0x2a>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e028      	b.n	8000a76 <draw_string+0x7c>

    uint16_t current_x = x;
 8000a24:	897b      	ldrh	r3, [r7, #10]
 8000a26:	82fb      	strh	r3, [r7, #22]
    uint16_t char_spacing = 1 * scale; // 문자 간 간격
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	82bb      	strh	r3, [r7, #20]

    while (*str) {
 8000a2c:	e016      	b.n	8000a5c <draw_string+0x62>
        if (current_x >= 640) break; // 화면을 벗어나면 중단
 8000a2e:	8afb      	ldrh	r3, [r7, #22]
 8000a30:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000a34:	d217      	bcs.n	8000a66 <draw_string+0x6c>

        uint16_t char_width = draw_char(*str, current_x, y, scale);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	7818      	ldrb	r0, [r3, #0]
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	893a      	ldrh	r2, [r7, #8]
 8000a3e:	8af9      	ldrh	r1, [r7, #22]
 8000a40:	f7ff ffae 	bl	80009a0 <draw_char>
 8000a44:	4603      	mov	r3, r0
 8000a46:	827b      	strh	r3, [r7, #18]
        current_x += char_width + char_spacing;
 8000a48:	8a7a      	ldrh	r2, [r7, #18]
 8000a4a:	8abb      	ldrh	r3, [r7, #20]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	8afb      	ldrh	r3, [r7, #22]
 8000a52:	4413      	add	r3, r2
 8000a54:	82fb      	strh	r3, [r7, #22]
        str++;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1e4      	bne.n	8000a2e <draw_string+0x34>
 8000a64:	e000      	b.n	8000a68 <draw_string+0x6e>
        if (current_x >= 640) break; // 화면을 벗어나면 중단
 8000a66:	bf00      	nop
    }

    return current_x - x - char_spacing; // 마지막 간격 제거
 8000a68:	8afa      	ldrh	r2, [r7, #22]
 8000a6a:	897b      	ldrh	r3, [r7, #10]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	8abb      	ldrh	r3, [r7, #20]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	b29b      	uxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <draw_string_centered>:
 * @param center_x: 중앙 X 좌표
 * @param y: Y 좌표
 * @param scale: 스케일 배수
 * @return: 그려진 문자열의 폭
 */
uint16_t draw_string_centered(const char* str, uint16_t center_x, uint16_t y, uint8_t scale) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b088      	sub	sp, #32
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	817b      	strh	r3, [r7, #10]
 8000a90:	460b      	mov	r3, r1
 8000a92:	813b      	strh	r3, [r7, #8]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71fb      	strb	r3, [r7, #7]
    if (str == NULL) return 0;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <draw_string_centered+0x24>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e02e      	b.n	8000b00 <draw_string_centered+0x82>

    // 문자열 길이 계산
    uint16_t len = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	83fb      	strh	r3, [r7, #30]
    const char* temp = str;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	61bb      	str	r3, [r7, #24]
    while (*temp++) len++;
 8000aaa:	e002      	b.n	8000ab2 <draw_string_centered+0x34>
 8000aac:	8bfb      	ldrh	r3, [r7, #30]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	83fb      	strh	r3, [r7, #30]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	61ba      	str	r2, [r7, #24]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f6      	bne.n	8000aac <draw_string_centered+0x2e>

    uint16_t char_width = FONT_WIDTH * scale;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	82fb      	strh	r3, [r7, #22]
    uint16_t char_spacing = 1 * scale;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	82bb      	strh	r3, [r7, #20]
    uint16_t total_width = len * char_width + (len - 1) * char_spacing;
 8000aca:	8bfa      	ldrh	r2, [r7, #30]
 8000acc:	8afb      	ldrh	r3, [r7, #22]
 8000ace:	fb12 f303 	smulbb	r3, r2, r3
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	8bfb      	ldrh	r3, [r7, #30]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	8ab9      	ldrh	r1, [r7, #20]
 8000adc:	fb11 f303 	smulbb	r3, r1, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	827b      	strh	r3, [r7, #18]

    uint16_t start_x = center_x - total_width / 2;
 8000ae6:	8a7b      	ldrh	r3, [r7, #18]
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	897a      	ldrh	r2, [r7, #10]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	823b      	strh	r3, [r7, #16]
    return draw_string(str, start_x, y, scale);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	893a      	ldrh	r2, [r7, #8]
 8000af6:	8a39      	ldrh	r1, [r7, #16]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff ff7e 	bl	80009fa <draw_string>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <print_fb_region>:
 * @param start_x: 출력할 시작 X 좌표
 * @param start_y: 출력할 시작 Y 좌표
 * @param width: 출력할 폭 (픽셀 단위)
 * @param height: 출력할 높이 (픽셀 단위)
 */
void print_fb_region(uint16_t start_x, uint16_t start_y, uint16_t width, uint16_t height) {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4623      	mov	r3, r4
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80bb      	strh	r3, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	807b      	strh	r3, [r7, #2]
 8000b22:	4613      	mov	r3, r2
 8000b24:	803b      	strh	r3, [r7, #0]
    printf("FB region (%d,%d) size %dx%d:\n", start_x, start_y, width, height);
 8000b26:	88f9      	ldrh	r1, [r7, #6]
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	8878      	ldrh	r0, [r7, #2]
 8000b2c:	883b      	ldrh	r3, [r7, #0]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4603      	mov	r3, r0
 8000b32:	483c      	ldr	r0, [pc, #240]	@ (8000c24 <print_fb_region+0x11c>)
 8000b34:	f004 face 	bl	80050d4 <iprintf>
    printf("+");
 8000b38:	202b      	movs	r0, #43	@ 0x2b
 8000b3a:	f004 fadd 	bl	80050f8 <putchar>
    for (uint16_t i = 0; i < width; i++) printf("-");
 8000b3e:	2300      	movs	r3, #0
 8000b40:	82fb      	strh	r3, [r7, #22]
 8000b42:	e005      	b.n	8000b50 <print_fb_region+0x48>
 8000b44:	202d      	movs	r0, #45	@ 0x2d
 8000b46:	f004 fad7 	bl	80050f8 <putchar>
 8000b4a:	8afb      	ldrh	r3, [r7, #22]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	82fb      	strh	r3, [r7, #22]
 8000b50:	8afa      	ldrh	r2, [r7, #22]
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3f5      	bcc.n	8000b44 <print_fb_region+0x3c>
    printf("+\n");
 8000b58:	4833      	ldr	r0, [pc, #204]	@ (8000c28 <print_fb_region+0x120>)
 8000b5a:	f004 fb2b 	bl	80051b4 <puts>

    for (uint16_t y = start_y; y < start_y + height && y < 480; y++) {
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	82bb      	strh	r3, [r7, #20]
 8000b62:	e03e      	b.n	8000be2 <print_fb_region+0xda>
        printf("|");
 8000b64:	207c      	movs	r0, #124	@ 0x7c
 8000b66:	f004 fac7 	bl	80050f8 <putchar>
        for (uint16_t x = start_x; x < start_x + width && x < 640; x++) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	827b      	strh	r3, [r7, #18]
 8000b6e:	e028      	b.n	8000bc2 <print_fb_region+0xba>
            uint8_t byte_idx = x / 8;
 8000b70:	8a7b      	ldrh	r3, [r7, #18]
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	73fb      	strb	r3, [r7, #15]
            uint8_t bit_idx = 7 - (x % 8);
 8000b78:	8a7b      	ldrh	r3, [r7, #18]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	73bb      	strb	r3, [r7, #14]
            uint8_t pixel = (fb[y][byte_idx] >> bit_idx) & 1;
 8000b86:	8aba      	ldrh	r2, [r7, #20]
 8000b88:	7bf9      	ldrb	r1, [r7, #15]
 8000b8a:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <print_fb_region+0x124>)
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4403      	add	r3, r0
 8000b96:	440b      	add	r3, r1
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	fa42 f303 	asr.w	r3, r2, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	737b      	strb	r3, [r7, #13]
            printf("%c", pixel ? '#' : ' ');
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <print_fb_region+0xac>
 8000bb0:	2323      	movs	r3, #35	@ 0x23
 8000bb2:	e000      	b.n	8000bb6 <print_fb_region+0xae>
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fa9e 	bl	80050f8 <putchar>
        for (uint16_t x = start_x; x < start_x + width && x < 640; x++) {
 8000bbc:	8a7b      	ldrh	r3, [r7, #18]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	827b      	strh	r3, [r7, #18]
 8000bc2:	8a7a      	ldrh	r2, [r7, #18]
 8000bc4:	88f9      	ldrh	r1, [r7, #6]
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	440b      	add	r3, r1
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	da03      	bge.n	8000bd6 <print_fb_region+0xce>
 8000bce:	8a7b      	ldrh	r3, [r7, #18]
 8000bd0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000bd4:	d3cc      	bcc.n	8000b70 <print_fb_region+0x68>
        }
        printf("|\n");
 8000bd6:	4816      	ldr	r0, [pc, #88]	@ (8000c30 <print_fb_region+0x128>)
 8000bd8:	f004 faec 	bl	80051b4 <puts>
    for (uint16_t y = start_y; y < start_y + height && y < 480; y++) {
 8000bdc:	8abb      	ldrh	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	82bb      	strh	r3, [r7, #20]
 8000be2:	8aba      	ldrh	r2, [r7, #20]
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	883b      	ldrh	r3, [r7, #0]
 8000be8:	440b      	add	r3, r1
 8000bea:	429a      	cmp	r2, r3
 8000bec:	da03      	bge.n	8000bf6 <print_fb_region+0xee>
 8000bee:	8abb      	ldrh	r3, [r7, #20]
 8000bf0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000bf4:	d3b6      	bcc.n	8000b64 <print_fb_region+0x5c>
    }

    printf("+");
 8000bf6:	202b      	movs	r0, #43	@ 0x2b
 8000bf8:	f004 fa7e 	bl	80050f8 <putchar>
    for (uint16_t i = 0; i < width; i++) printf("-");
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	823b      	strh	r3, [r7, #16]
 8000c00:	e005      	b.n	8000c0e <print_fb_region+0x106>
 8000c02:	202d      	movs	r0, #45	@ 0x2d
 8000c04:	f004 fa78 	bl	80050f8 <putchar>
 8000c08:	8a3b      	ldrh	r3, [r7, #16]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	823b      	strh	r3, [r7, #16]
 8000c0e:	8a3a      	ldrh	r2, [r7, #16]
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3f5      	bcc.n	8000c02 <print_fb_region+0xfa>
    printf("+\n\n");
 8000c16:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <print_fb_region+0x12c>)
 8000c18:	f004 facc 	bl	80051b4 <puts>
}
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	08005ef8 	.word	0x08005ef8
 8000c28:	08005f18 	.word	0x08005f18
 8000c2c:	2000022c 	.word	0x2000022c
 8000c30:	08005f1c 	.word	0x08005f1c
 8000c34:	08005f20 	.word	0x08005f20

08000c38 <example_usage>:
    }
    printf("\n");
}

// 사용 예시와 메인 함수
void example_usage(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    // 화면 초기화
    memset(fb, 0, sizeof(fb));
 8000c3c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c40:	2100      	movs	r1, #0
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <example_usage+0x78>)
 8000c44:	f004 fb96 	bl	8005374 <memset>

    printf("=== 문자열 출력 테스트 ===\n\n");
 8000c48:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <example_usage+0x7c>)
 8000c4a:	f004 fab3 	bl	80051b4 <puts>

    // 1. 기본 문자열 출력
    draw_string("HELLO WORLD!", 10, 10, 3);
 8000c4e:	2303      	movs	r3, #3
 8000c50:	220a      	movs	r2, #10
 8000c52:	210a      	movs	r1, #10
 8000c54:	4818      	ldr	r0, [pc, #96]	@ (8000cb8 <example_usage+0x80>)
 8000c56:	f7ff fed0 	bl	80009fa <draw_string>
    printf("1. Basic string at (10,10) scale 1:\n");
 8000c5a:	4818      	ldr	r0, [pc, #96]	@ (8000cbc <example_usage+0x84>)
 8000c5c:	f004 faaa 	bl	80051b4 <puts>
    print_fb_region(5, 5, 100, 20);
 8000c60:	2314      	movs	r3, #20
 8000c62:	2264      	movs	r2, #100	@ 0x64
 8000c64:	2105      	movs	r1, #5
 8000c66:	2005      	movs	r0, #5
 8000c68:	f7ff ff4e 	bl	8000b08 <print_fb_region>

    // 2. 큰 크기 문자열
    draw_string("BIG TEXT", 10, 40, 4);
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	2228      	movs	r2, #40	@ 0x28
 8000c70:	210a      	movs	r1, #10
 8000c72:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <example_usage+0x88>)
 8000c74:	f7ff fec1 	bl	80009fa <draw_string>
    printf("2. Scaled string at (10,40) scale 2:\n");
 8000c78:	4812      	ldr	r0, [pc, #72]	@ (8000cc4 <example_usage+0x8c>)
 8000c7a:	f004 fa9b 	bl	80051b4 <puts>
    print_fb_region(5, 35, 120, 25);
 8000c7e:	2319      	movs	r3, #25
 8000c80:	2278      	movs	r2, #120	@ 0x78
 8000c82:	2123      	movs	r1, #35	@ 0x23
 8000c84:	2005      	movs	r0, #5
 8000c86:	f7ff ff3f 	bl	8000b08 <print_fb_region>

    // 3. 중앙 정렬
    draw_string_centered("CENTERED", 320, 80, 3);
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	2250      	movs	r2, #80	@ 0x50
 8000c8e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000c92:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <example_usage+0x90>)
 8000c94:	f7ff fef3 	bl	8000a7e <draw_string_centered>
    printf("3. Centered string at x=320:\n");
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <example_usage+0x94>)
 8000c9a:	f004 fa8b 	bl	80051b4 <puts>
    print_fb_region(250, 75, 140, 15);
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	228c      	movs	r2, #140	@ 0x8c
 8000ca2:	214b      	movs	r1, #75	@ 0x4b
 8000ca4:	20fa      	movs	r0, #250	@ 0xfa
 8000ca6:	f7ff ff2f 	bl	8000b08 <print_fb_region>
//    print_fb_region(5, 185, 200, 15);
//
//    // 8. 전체 화면 미리보기
//    printf("8. Full screen overview (1/4 scale):\n");
//    print_fb_scaled(4);
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000022c 	.word	0x2000022c
 8000cb4:	08005f58 	.word	0x08005f58
 8000cb8:	08005f7c 	.word	0x08005f7c
 8000cbc:	08005f8c 	.word	0x08005f8c
 8000cc0:	08005fb0 	.word	0x08005fb0
 8000cc4:	08005fbc 	.word	0x08005fbc
 8000cc8:	08005fe4 	.word	0x08005fe4
 8000ccc:	08005ff0 	.word	0x08005ff0

08000cd0 <htim2_callback>:
//	for(int i=0; i<line; i++){
//		HAL_SPI_Transmit_DMA(&hspi2, fb[0], H_SIZE);
//	}
//}

void htim2_callback(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if(v_flag_on){
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <htim2_callback+0x5c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01c      	beq.n	8000d16 <htim2_callback+0x46>
		if (debug_hsync_count%debug_div_h == 0) {
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <htim2_callback+0x60>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <htim2_callback+0x64>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ce8:	fb01 f202 	mul.w	r2, r1, r2
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <htim2_callback+0x46>
			debug_spi_start++;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <htim2_callback+0x68>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <htim2_callback+0x68>)
 8000cfa:	6013      	str	r3, [r2, #0]
			HAL_SPI_Transmit_DMA(&hspi2, fb[v_pos], H_SIZE);
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <htim2_callback+0x6c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <htim2_callback+0x70>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2250      	movs	r2, #80	@ 0x50
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <htim2_callback+0x74>)
 8000d12:	f002 fa05 	bl	8003120 <HAL_SPI_Transmit_DMA>
//			HAL_SPI_Transmit_DMA(&hspi2, fb[v_pos], H_SIZE);
//		}
//		 debug_spi_start++;
//		 HAL_SPI_Transmit_DMA(&hspi2, fb[v_pos], H_SIZE);
	}
	debug_hsync_count++;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <htim2_callback+0x60>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <htim2_callback+0x60>)
 8000d1e:	6013      	str	r3, [r2, #0]

	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000d20:	2108      	movs	r1, #8
 8000d22:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <htim2_callback+0x78>)
 8000d24:	f002 fd24 	bl	8003770 <HAL_TIM_OC_Start_IT>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000982c 	.word	0x2000982c
 8000d30:	20000218 	.word	0x20000218
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000224 	.word	0x20000224
 8000d3c:	20009830 	.word	0x20009830
 8000d40:	2000022c 	.word	0x2000022c
 8000d44:	20000088 	.word	0x20000088
 8000d48:	20000140 	.word	0x20000140

08000d4c <htim3_callback>:

void htim3_callback(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	v_flag_on = 1;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <htim3_callback+0x20>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
	debug_vsync_count++;
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <htim3_callback+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <htim3_callback+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000d60:	2104      	movs	r1, #4
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <htim3_callback+0x28>)
 8000d64:	f002 fd04 	bl	8003770 <HAL_TIM_OC_Start_IT>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000982c 	.word	0x2000982c
 8000d70:	2000021c 	.word	0x2000021c
 8000d74:	20000188 	.word	0x20000188

08000d78 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d102      	bne.n	8000d8e <HAL_TIM_OC_DelayElapsedCallback+0x16>
		htim2_callback();
 8000d88:	f7ff ffa2 	bl	8000cd0 <htim2_callback>
	}else if(htim == &htim3){
		htim3_callback();
	}
}
 8000d8c:	e005      	b.n	8000d9a <HAL_TIM_OC_DelayElapsedCallback+0x22>
	}else if(htim == &htim3){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_OC_DelayElapsedCallback+0x22>
		htim3_callback();
 8000d96:	f7ff ffd9 	bl	8000d4c <htim3_callback>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000140 	.word	0x20000140
 8000da8:	20000188 	.word	0x20000188

08000dac <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	v_pos = v_pos + debug_div_h;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_SPI_TxCpltCallback+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_SPI_TxCpltCallback+0x58>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_SPI_TxCpltCallback+0x54>)
 8000dc0:	6013      	str	r3, [r2, #0]
	if(v_pos == V_SIZE){
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_SPI_TxCpltCallback+0x54>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dca:	d106      	bne.n	8000dda <HAL_SPI_TxCpltCallback+0x2e>
		v_flag_on = v_pos = 0;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_SPI_TxCpltCallback+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_SPI_TxCpltCallback+0x54>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <HAL_SPI_TxCpltCallback+0x5c>)
 8000dd8:	6013      	str	r3, [r2, #0]
	}
	debug_spi_complete++;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_SPI_TxCpltCallback+0x60>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_SPI_TxCpltCallback+0x60>)
 8000de2:	6013      	str	r3, [r2, #0]
	debug_spi_fail = debug_spi_start - debug_spi_complete;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_SPI_TxCpltCallback+0x64>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_SPI_TxCpltCallback+0x60>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_SPI_TxCpltCallback+0x68>)
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20009830 	.word	0x20009830
 8000e04:	20000000 	.word	0x20000000
 8000e08:	2000982c 	.word	0x2000982c
 8000e0c:	20000220 	.word	0x20000220
 8000e10:	20000224 	.word	0x20000224
 8000e14:	20000228 	.word	0x20000228

08000e18 <debug_var>:
uint32_t debug_now = 0;
uint32_t debug_Hz = 0;

uint32_t debug_d = 0;

void debug_var(uint32_t var, uint32_t tick){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	debug_now = HAL_GetTick();
 8000e22:	f000 fe2f 	bl	8001a84 <HAL_GetTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <debug_var+0x6c>)
 8000e2a:	6013      	str	r3, [r2, #0]
	if(debug_now - debug_past >= tick){
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <debug_var+0x6c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <debug_var+0x70>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d81e      	bhi.n	8000e7a <debug_var+0x62>
		debug_d = debug_now - debug_past;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <debug_var+0x6c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <debug_var+0x70>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <debug_var+0x74>)
 8000e48:	6013      	str	r3, [r2, #0]
		debug_Hz = var - debug_past_f;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <debug_var+0x78>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <debug_var+0x7c>)
 8000e54:	6013      	str	r3, [r2, #0]

		debug_Hz = debug_Hz*1000/tick;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <debug_var+0x7c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e5e:	fb03 f202 	mul.w	r2, r3, r2
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <debug_var+0x7c>)
 8000e6a:	6013      	str	r3, [r2, #0]

		debug_past_f = var;
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <debug_var+0x78>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
		debug_past = debug_now;
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <debug_var+0x6c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <debug_var+0x70>)
 8000e78:	6013      	str	r3, [r2, #0]
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000983c 	.word	0x2000983c
 8000e88:	20009834 	.word	0x20009834
 8000e8c:	20009844 	.word	0x20009844
 8000e90:	20009838 	.word	0x20009838
 8000e94:	20009840 	.word	0x20009840

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fd8c 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f832 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fa3a 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fa18 	bl	80012dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 f9ec 	bl	8001288 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eb0:	f000 f8c8 	bl	8001044 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb4:	f000 f956 	bl	8001164 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000eb8:	f000 f88e 	bl	8000fd8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000ebc:	480f      	ldr	r0, [pc, #60]	@ (8000efc <main+0x64>)
 8000ebe:	f002 fba3 	bl	8003608 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000ec2:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <main+0x68>)
 8000ec4:	f002 fba0 	bl	8003608 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ec8:	2104      	movs	r1, #4
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <main+0x64>)
 8000ecc:	f002 fda8 	bl	8003a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <main+0x68>)
 8000ed4:	f002 fda4 	bl	8003a20 <HAL_TIM_PWM_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000ed8:	2108      	movs	r1, #8
 8000eda:	4808      	ldr	r0, [pc, #32]	@ (8000efc <main+0x64>)
 8000edc:	f002 fc48 	bl	8003770 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <main+0x68>)
 8000ee4:	f002 fc44 	bl	8003770 <HAL_TIM_OC_Start_IT>
//  for(int j = 240; j < 250; j++){
//  	  for(int i = 38/2; i < 43/2; i++){
//  		  fb[j][i] = 0xFF;  // 모든 비트 1 (흰색)
//  		  }
//  }
  example_usage();
 8000ee8:	f7ff fea6 	bl	8000c38 <example_usage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  debug_var(debug_hsync_count, 1000);
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <main+0x6c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff8f 	bl	8000e18 <debug_var>
 8000efa:	e7f7      	b.n	8000eec <main+0x54>
 8000efc:	20000140 	.word	0x20000140
 8000f00:	20000188 	.word	0x20000188
 8000f04:	20000218 	.word	0x20000218

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fa2c 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <SystemClock_Config+0xc8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a26      	ldr	r2, [pc, #152]	@ (8000fd0 <SystemClock_Config+0xc8>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <SystemClock_Config+0xc8>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a20      	ldr	r2, [pc, #128]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fba5 	bl	80026dc <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f98:	f000 fa2e 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fe07 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc4:	f000 fa18 	bl	80013f8 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	@ 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <MX_SPI2_Init+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fe4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_SPI2_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_SPI2_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_SPI2_Init+0x64>)
 8001004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001008:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_SPI2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_SPI2_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_SPI2_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_SPI2_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_SPI2_Init+0x64>)
 8001024:	220a      	movs	r2, #10
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_SPI2_Init+0x64>)
 800102a:	f001 ffef 	bl	800300c <HAL_SPI_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001034:	f000 f9e0 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000088 	.word	0x20000088
 8001040:	40003800 	.word	0x40003800

08001044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001074:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <MX_TIM2_Init+0x11c>)
 800107e:	2203      	movs	r2, #3
 8001080:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b37      	ldr	r3, [pc, #220]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 8001088:	4b35      	ldr	r3, [pc, #212]	@ (8001160 <MX_TIM2_Init+0x11c>)
 800108a:	f240 321f 	movw	r2, #799	@ 0x31f
 800108e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109c:	4830      	ldr	r0, [pc, #192]	@ (8001160 <MX_TIM2_Init+0x11c>)
 800109e:	f002 fa63 	bl	8003568 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010a8:	f000 f9a6 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4829      	ldr	r0, [pc, #164]	@ (8001160 <MX_TIM2_Init+0x11c>)
 80010ba:	f002 ff6f 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010c4:	f000 f998 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c8:	4825      	ldr	r0, [pc, #148]	@ (8001160 <MX_TIM2_Init+0x11c>)
 80010ca:	f002 fc4f 	bl	800396c <HAL_TIM_PWM_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010d4:	f000 f990 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010d8:	4821      	ldr	r0, [pc, #132]	@ (8001160 <MX_TIM2_Init+0x11c>)
 80010da:	f002 faef 	bl	80036bc <HAL_TIM_OC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80010e4:	f000 f988 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010e8:	2320      	movs	r3, #32
 80010ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4619      	mov	r1, r3
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <MX_TIM2_Init+0x11c>)
 80010f8:	f003 fbe4 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001102:	f000 f979 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	@ 0x60
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96-1;
 800110a:	235f      	movs	r3, #95	@ 0x5f
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001112:	2304      	movs	r3, #4
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2204      	movs	r2, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	@ (8001160 <MX_TIM2_Init+0x11c>)
 800111e:	f002 fe7b 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001128:	f000 f966 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96+48-140-1;
 8001130:	2303      	movs	r3, #3
 8001132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2208      	movs	r2, #8
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001144:	f002 fe0c 	bl	8003d60 <HAL_TIM_OC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800114e:	f000 f953 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM2_Init+0x11c>)
 8001154:	f000 fa5c 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3738      	adds	r7, #56	@ 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000140 	.word	0x20000140

08001164 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001196:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <MX_TIM3_Init+0x11c>)
 8001198:	4a3a      	ldr	r2, [pc, #232]	@ (8001284 <MX_TIM3_Init+0x120>)
 800119a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <MX_TIM3_Init+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 525-1;
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011aa:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80011ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011bc:	4830      	ldr	r0, [pc, #192]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011be:	f002 f9d3 	bl	8003568 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011c8:	f000 f916 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011cc:	482c      	ldr	r0, [pc, #176]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011ce:	f002 fbcd 	bl	800396c <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80011d8:	f000 f90e 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80011dc:	4828      	ldr	r0, [pc, #160]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011de:	f002 fa6d 	bl	80036bc <HAL_TIM_OC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80011e8:	f000 f906 	bl	80013f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80011f0:	2310      	movs	r3, #16
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4821      	ldr	r0, [pc, #132]	@ (8001280 <MX_TIM3_Init+0x11c>)
 80011fc:	f002 ff95 	bl	800412a <HAL_TIM_SlaveConfigSynchro>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001206:	f000 f8f7 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <MX_TIM3_Init+0x11c>)
 800121a:	f003 fb53 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001224:	f000 f8e8 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	@ 0x60
 800122a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2-1;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001230:	2302      	movs	r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4810      	ldr	r0, [pc, #64]	@ (8001280 <MX_TIM3_Init+0x11c>)
 8001240:	f002 fdea 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800124a:	f000 f8d5 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2+33-1;
 8001252:	2322      	movs	r3, #34	@ 0x22
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <MX_TIM3_Init+0x11c>)
 8001262:	f002 fd7d 	bl	8003d60 <HAL_TIM_OC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800126c:	f000 f8c4 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <MX_TIM3_Init+0x11c>)
 8001272:	f000 f9cd 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8001276:	bf00      	nop
 8001278:	3738      	adds	r7, #56	@ 0x38
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000188 	.word	0x20000188
 8001284:	40000400 	.word	0x40000400

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <MX_USART2_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f003 fb82 	bl	80049c8 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f895 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001d0 	.word	0x200001d0
 80012d8:	40004400 	.word	0x40004400

080012dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_DMA_Init+0x3c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <MX_DMA_Init+0x3c>)
 80012ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_DMA_Init+0x3c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200f      	movs	r0, #15
 8001304:	f000 fca5 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001308:	200f      	movs	r0, #15
 800130a:	f000 fcbe 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a2c      	ldr	r2, [pc, #176]	@ (80013ec <MX_GPIO_Init+0xd0>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a25      	ldr	r2, [pc, #148]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2120      	movs	r1, #32
 80013a6:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_GPIO_Init+0xd4>)
 80013a8:	f001 f97e 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <MX_GPIO_Init+0xd8>)
 80013c4:	f000 ffec 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c8:	2320      	movs	r3, #32
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0xd4>)
 80013e0:	f000 ffde 	bl	80023a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020800 	.word	0x40020800

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001442:	2007      	movs	r0, #7
 8001444:	f000 fbfa 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a3f      	ldr	r2, [pc, #252]	@ (8001570 <HAL_SPI_MspInit+0x11c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d178      	bne.n	8001568 <HAL_SPI_MspInit+0x114>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a3d      	ldr	r2, [pc, #244]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a36      	ldr	r2, [pc, #216]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <HAL_SPI_MspInit+0x120>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ca:	2308      	movs	r3, #8
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014da:	2305      	movs	r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4824      	ldr	r0, [pc, #144]	@ (8001578 <HAL_SPI_MspInit+0x124>)
 80014e6:	f000 ff5b 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014fc:	2305      	movs	r3, #5
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	481d      	ldr	r0, [pc, #116]	@ (800157c <HAL_SPI_MspInit+0x128>)
 8001508:	f000 ff4a 	bl	80023a0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800150c:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 800150e:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <HAL_SPI_MspInit+0x130>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 800151a:	2240      	movs	r2, #64	@ 0x40
 800151c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800152a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001540:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001544:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 800154e:	f000 fbb7 	bl	8001cc0 <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001558:	f7ff ff4e 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001560:	649a      	str	r2, [r3, #72]	@ 0x48
 8001562:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_SPI_MspInit+0x12c>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40003800 	.word	0x40003800
 8001574:	40023800 	.word	0x40023800
 8001578:	40020800 	.word	0x40020800
 800157c:	40020400 	.word	0x40020400
 8001580:	200000e0 	.word	0x200000e0
 8001584:	40026070 	.word	0x40026070

08001588 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001598:	d116      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f000 fb49 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c0:	201c      	movs	r0, #28
 80015c2:	f000 fb62 	bl	8001c8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c6:	e01a      	b.n	80015fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	@ (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_TIM_Base_MspInit+0x80>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201d      	movs	r0, #29
 80015f4:	f000 fb2d 	bl	8001c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f8:	201d      	movs	r0, #29
 80015fa:	f000 fb46 	bl	8001c8a <HAL_NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40000400 	.word	0x40000400

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800164e:	2302      	movs	r3, #2
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165e:	2301      	movs	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4816      	ldr	r0, [pc, #88]	@ (80016c4 <HAL_TIM_MspPostInit+0xb4>)
 800166a:	f000 fe99 	bl	80023a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800166e:	e022      	b.n	80016b6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <HAL_TIM_MspPostInit+0xb8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11d      	bne.n	80016b6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_TIM_MspPostInit+0xb0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001696:	2340      	movs	r3, #64	@ 0x40
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a6:	2302      	movs	r3, #2
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <HAL_TIM_MspPostInit+0xb4>)
 80016b2:	f000 fe75 	bl	80023a0 <HAL_GPIO_Init>
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40000400 	.word	0x40000400

080016cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_UART_MspInit+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_UART_MspInit+0x88>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_UART_MspInit+0x88>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_UART_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001726:	230c      	movs	r3, #12
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001736:	2307      	movs	r3, #7
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_UART_MspInit+0x8c>)
 8001742:	f000 fe2d 	bl	80023a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40004400 	.word	0x40004400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f953 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA1_Stream4_IRQHandler+0x10>)
 80017c2:	f000 fb83 	bl	8001ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000e0 	.word	0x200000e0

080017d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <TIM2_IRQHandler+0x10>)
 80017d6:	f002 f9d3 	bl	8003b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000140 	.word	0x20000140

080017e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <TIM3_IRQHandler+0x10>)
 80017ea:	f002 f9c9 	bl	8003b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000188 	.word	0x20000188

080017f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
  }

  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
  }
  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f003 fd84 	bl	8005410 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20020000 	.word	0x20020000
 8001934:	00000400 	.word	0x00000400
 8001938:	20009848 	.word	0x20009848
 800193c:	200099a0 	.word	0x200099a0

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001968:	f7ff ffea 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fd43 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fa7f 	bl	8000e98 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019a8:	080063f4 	.word	0x080063f4
  ldr r2, =_sbss
 80019ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019b0:	2000999c 	.word	0x2000999c

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f92b 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fd0a 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f943 	bl	8001ca6 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f90b 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000004 	.word	0x20000004
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000008 	.word	0x20000008

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	2000984c 	.word	0x2000984c

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000984c 	.word	0x2000984c

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	@ (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff feda 	bl	8001a84 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e099      	b.n	8001e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fec1 	bl	8001a84 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d908      	bls.n	8001d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e078      	b.n	8001e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e8      	bne.n	8001cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4b38      	ldr	r3, [pc, #224]	@ (8001e18 <HAL_DMA_Init+0x158>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	4313      	orrs	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d117      	bne.n	8001de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fa6f 	bl	80022a8 <DMA_CheckFifoParam>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dde:	2301      	movs	r3, #1
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa26 	bl	800223c <DMA_CalcBaseAndBitshift>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	223f      	movs	r2, #63	@ 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	f010803f 	.word	0xf010803f

08001e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Start_IT+0x26>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e040      	b.n	8001ec4 <HAL_DMA_Start_IT+0xa8>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d12f      	bne.n	8001eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f9b8 	bl	80021e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	223f      	movs	r2, #63	@ 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0216 	orr.w	r2, r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e005      	b.n	8001ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8002114 <HAL_DMA_IRQHandler+0x248>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a8e      	ldr	r2, [pc, #568]	@ (8002118 <HAL_DMA_IRQHandler+0x24c>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0204 	bic.w	r2, r2, #4
 8001f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	2208      	movs	r2, #8
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d012      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	2204      	movs	r2, #4
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d012      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	2204      	movs	r2, #4
 8001f92:	409a      	lsls	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	2210      	movs	r2, #16
 8001faa:	409a      	lsls	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d043      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03c      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d018      	beq.n	800200e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d024      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
 8001ffa:	e01f      	b.n	800203c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e016      	b.n	800203c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0208 	bic.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2220      	movs	r2, #32
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 808f 	beq.w	800216c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8087 	beq.w	800216c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	2220      	movs	r2, #32
 8002064:	409a      	lsls	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b05      	cmp	r3, #5
 8002074:	d136      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0216 	bic.w	r2, r2, #22
 8002084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x1da>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0208 	bic.w	r2, r2, #8
 80020b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	223f      	movs	r2, #63	@ 0x3f
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07e      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
        }
        return;
 80020e2:	e079      	b.n	80021d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	2b00      	cmp	r3, #0
 8002106:	d031      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e02c      	b.n	800216c <HAL_DMA_IRQHandler+0x2a0>
 8002112:	bf00      	nop
 8002114:	20000004 	.word	0x20000004
 8002118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d023      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e01e      	b.n	800216c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	2b00      	cmp	r3, #0
 8002172:	d032      	beq.n	80021da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2205      	movs	r2, #5
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d307      	bcc.n	80021b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f2      	bne.n	8002198 <HAL_DMA_IRQHandler+0x2cc>
 80021b2:	e000      	b.n	80021b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
 80021d6:	e000      	b.n	80021da <HAL_DMA_IRQHandler+0x30e>
        return;
 80021d8:	bf00      	nop
    }
  }
}
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b40      	cmp	r3, #64	@ 0x40
 800220c:	d108      	bne.n	8002220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221e:	e007      	b.n	8002230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b10      	subs	r3, #16
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <DMA_CalcBaseAndBitshift+0x64>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002256:	4a13      	ldr	r2, [pc, #76]	@ (80022a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d909      	bls.n	800227e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002272:	f023 0303 	bic.w	r3, r3, #3
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58
 800227c:	e007      	b.n	800228e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	aaaaaaab 	.word	0xaaaaaaab
 80022a4:	080063a8 	.word	0x080063a8

080022a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11f      	bne.n	8002302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d856      	bhi.n	8002376 <DMA_CheckFifoParam+0xce>
 80022c8:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <DMA_CheckFifoParam+0x28>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022f3 	.word	0x080022f3
 80022d8:	080022e1 	.word	0x080022e1
 80022dc:	08002377 	.word	0x08002377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d046      	beq.n	800237a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e043      	b.n	800237a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022fa:	d140      	bne.n	800237e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e03d      	b.n	800237e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230a:	d121      	bne.n	8002350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d837      	bhi.n	8002382 <DMA_CheckFifoParam+0xda>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <DMA_CheckFifoParam+0x70>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	0800232f 	.word	0x0800232f
 8002320:	08002329 	.word	0x08002329
 8002324:	08002341 	.word	0x08002341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      break;
 800232c:	e030      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d025      	beq.n	8002386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233e:	e022      	b.n	8002386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234e:	e01c      	b.n	800238a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d903      	bls.n	800235e <DMA_CheckFifoParam+0xb6>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800235c:	e018      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      break;
 8002362:	e015      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e00b      	b.n	800238e <DMA_CheckFifoParam+0xe6>
      break;
 8002376:	bf00      	nop
 8002378:	e00a      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e008      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e006      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e004      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e002      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;   
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
    }
  } 
  
  return status; 
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e159      	b.n	8002670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8148 	bne.w	800266a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d005      	beq.n	80023f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d017      	beq.n	8002490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d123      	bne.n	80024e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a2 	beq.w	800266a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <HAL_GPIO_Init+0x2e8>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_GPIO_Init+0x2e8>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002534:	6453      	str	r3, [r2, #68]	@ 0x44
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <HAL_GPIO_Init+0x2e8>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002542:	4a52      	ldr	r2, [pc, #328]	@ (800268c <HAL_GPIO_Init+0x2ec>)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a49      	ldr	r2, [pc, #292]	@ (8002690 <HAL_GPIO_Init+0x2f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x202>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a48      	ldr	r2, [pc, #288]	@ (8002694 <HAL_GPIO_Init+0x2f4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x1fe>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a47      	ldr	r2, [pc, #284]	@ (8002698 <HAL_GPIO_Init+0x2f8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x1fa>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a46      	ldr	r2, [pc, #280]	@ (800269c <HAL_GPIO_Init+0x2fc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x1f6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a45      	ldr	r2, [pc, #276]	@ (80026a0 <HAL_GPIO_Init+0x300>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x1f2>
 800258e:	2304      	movs	r3, #4
 8002590:	e008      	b.n	80025a4 <HAL_GPIO_Init+0x204>
 8002592:	2307      	movs	r3, #7
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x204>
 8002596:	2303      	movs	r3, #3
 8002598:	e004      	b.n	80025a4 <HAL_GPIO_Init+0x204>
 800259a:	2302      	movs	r3, #2
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_Init+0x204>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x204>
 80025a2:	2300      	movs	r3, #0
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	4093      	lsls	r3, r2
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b4:	4935      	ldr	r1, [pc, #212]	@ (800268c <HAL_GPIO_Init+0x2ec>)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c2:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e6:	4a2f      	ldr	r2, [pc, #188]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ec:	4b2d      	ldr	r3, [pc, #180]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002610:	4a24      	ldr	r2, [pc, #144]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002616:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263a:	4a1a      	ldr	r2, [pc, #104]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002640:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_GPIO_Init+0x304>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	f67f aea2 	bls.w	80023bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	40013800 	.word	0x40013800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e267      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026fa:	4b88      	ldr	r3, [pc, #544]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b85      	ldr	r3, [pc, #532]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b82      	ldr	r3, [pc, #520]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b7e      	ldr	r3, [pc, #504]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e242      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b76      	ldr	r3, [pc, #472]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b70      	ldr	r3, [pc, #448]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6f      	ldr	r2, [pc, #444]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b69      	ldr	r3, [pc, #420]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b66      	ldr	r3, [pc, #408]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a65      	ldr	r2, [pc, #404]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f976 	bl	8001a84 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f972 	bl	8001a84 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e207      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5b      	ldr	r3, [pc, #364]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff f962 	bl	8001a84 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff f95e 	bl	8001a84 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1f3      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b51      	ldr	r3, [pc, #324]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027f2:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c7      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4937      	ldr	r1, [pc, #220]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_RCC_OscConfig+0x244>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7ff f917 	bl	8001a84 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7ff f913 	bl	8001a84 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a8      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4925      	ldr	r1, [pc, #148]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <HAL_RCC_OscConfig+0x244>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff f8f6 	bl	8001a84 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff f8f2 	bl	8001a84 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e187      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_RCC_OscConfig+0x248>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f8d6 	bl	8001a84 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7ff f8d2 	bl	8001a84 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e167      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_OscConfig+0x240>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_OscConfig+0x248>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7ff f8bf 	bl	8001a84 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff f8bb 	bl	8001a84 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e150      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b88      	ldr	r3, [pc, #544]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b81      	ldr	r3, [pc, #516]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b7d      	ldr	r3, [pc, #500]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b7a      	ldr	r3, [pc, #488]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b77      	ldr	r3, [pc, #476]	@ (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b74      	ldr	r3, [pc, #464]	@ (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a73      	ldr	r2, [pc, #460]	@ (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7ff f87b 	bl	8001a84 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7ff f877 	bl	8001a84 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e10c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b50 <HAL_RCC_OscConfig+0x474>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ea>
 80029b8:	4b64      	ldr	r3, [pc, #400]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a63      	ldr	r2, [pc, #396]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029ce:	4b5f      	ldr	r3, [pc, #380]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029da:	4b5c      	ldr	r3, [pc, #368]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	4a5b      	ldr	r2, [pc, #364]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029e8:	4b58      	ldr	r3, [pc, #352]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f4:	4b55      	ldr	r3, [pc, #340]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a54      	ldr	r2, [pc, #336]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7ff f83c 	bl	8001a84 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7ff f838 	bl	8001a84 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0cb      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x334>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7ff f826 	bl	8001a84 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f822 	bl	8001a84 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0b5      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b3e      	ldr	r3, [pc, #248]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	4a38      	ldr	r2, [pc, #224]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a1 	beq.w	8002bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d05c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d141      	bne.n	8002b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fff6 	bl	8001a84 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fff2 	bl	8001a84 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e087      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	491b      	ldr	r1, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe ffcb 	bl	8001a84 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe ffc7 	bl	8001a84 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e05c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x416>
 8002b10:	e054      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe ffb4 	bl	8001a84 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe ffb0 	bl	8001a84 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e045      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
 8002b3e:	e03d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e038      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d121      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11a      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fee2 	bl	8001a84 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fede 	bl	8001a84 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fe42 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08006390 	.word	0x08006390
 8002d90:	20000004 	.word	0x20000004
 8002d94:	20000008 	.word	0x20000008

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b094      	sub	sp, #80	@ 0x50
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b79      	ldr	r3, [pc, #484]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80e1 	bhi.w	8002f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e0db      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b73      	ldr	r3, [pc, #460]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd0:	e0db      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b73      	ldr	r3, [pc, #460]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd6:	e0d8      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d063      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	2200      	movs	r2, #0
 8002df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002df8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e02:	2300      	movs	r3, #0
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	0159      	lsls	r1, r3, #5
 8002e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1c:	0150      	lsls	r0, r2, #5
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4621      	mov	r1, r4
 8002e24:	1a51      	subs	r1, r2, r1
 8002e26:	6139      	str	r1, [r7, #16]
 8002e28:	4629      	mov	r1, r5
 8002e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	018b      	lsls	r3, r1, #6
 8002e40:	4651      	mov	r1, sl
 8002e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e46:	4651      	mov	r1, sl
 8002e48:	018a      	lsls	r2, r1, #6
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e50:	4659      	mov	r1, fp
 8002e52:	eb63 0901 	sbc.w	r9, r3, r1
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6a:	4690      	mov	r8, r2
 8002e6c:	4699      	mov	r9, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	eb18 0303 	adds.w	r3, r8, r3
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	462b      	mov	r3, r5
 8002e78:	eb49 0303 	adc.w	r3, r9, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	024b      	lsls	r3, r1, #9
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e94:	4621      	mov	r1, r4
 8002e96:	024a      	lsls	r2, r1, #9
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ea8:	f7fd f9ea 	bl	8000280 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb4:	e058      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	f04f 0000 	mov.w	r0, #0
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	0159      	lsls	r1, r3, #5
 8002ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee2:	0150      	lsls	r0, r2, #5
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eee:	4649      	mov	r1, r9
 8002ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f08:	ebb2 040a 	subs.w	r4, r2, sl
 8002f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	00eb      	lsls	r3, r5, #3
 8002f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1e:	00e2      	lsls	r2, r4, #3
 8002f20:	4614      	mov	r4, r2
 8002f22:	461d      	mov	r5, r3
 8002f24:	4643      	mov	r3, r8
 8002f26:	18e3      	adds	r3, r4, r3
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	eb45 0303 	adc.w	r3, r5, r3
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3e:	4629      	mov	r1, r5
 8002f40:	028b      	lsls	r3, r1, #10
 8002f42:	4621      	mov	r1, r4
 8002f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f48:	4621      	mov	r1, r4
 8002f4a:	028a      	lsls	r2, r1, #10
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f52:	2200      	movs	r2, #0
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	61fa      	str	r2, [r7, #28]
 8002f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5c:	f7fd f990 	bl	8000280 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4613      	mov	r3, r2
 8002f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3750      	adds	r7, #80	@ 0x50
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc0:	f7ff fff0 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0a9b      	lsrs	r3, r3, #10
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	080063a0 	.word	0x080063a0

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe8:	f7ff ffdc 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0b5b      	lsrs	r3, r3, #13
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	080063a0 	.word	0x080063a0

0800300c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07b      	b.n	8003116 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800302e:	d009      	beq.n	8003044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
 8003036:	e005      	b.n	8003044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f9f8 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800307a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	f003 0104 	and.w	r1, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	f003 0210 	and.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e097      	b.n	800326e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_Transmit_DMA+0x2a>
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e08f      	b.n	800326e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_SPI_Transmit_DMA+0x3c>
 8003158:	2302      	movs	r3, #2
 800315a:	e088      	b.n	800326e <HAL_SPI_Transmit_DMA+0x14e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031aa:	d10f      	bne.n	80031cc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d0:	4a29      	ldr	r2, [pc, #164]	@ (8003278 <HAL_SPI_Transmit_DMA+0x158>)
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d8:	4a28      	ldr	r2, [pc, #160]	@ (800327c <HAL_SPI_Transmit_DMA+0x15c>)
 80031da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e0:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <HAL_SPI_Transmit_DMA+0x160>)
 80031e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	4619      	mov	r1, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003202:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003204:	f7fe fe0a 	bl	8001e1c <HAL_DMA_Start_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e023      	b.n	800326e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003230:	2b40      	cmp	r3, #64	@ 0x40
 8003232:	d007      	beq.n	8003244 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0220 	orr.w	r2, r2, #32
 800325a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0202 	orr.w	r2, r2, #2
 800326a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	08003355 	.word	0x08003355
 800327c:	080032ad 	.word	0x080032ad
 8003280:	08003371 	.word	0x08003371

08003284 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ba:	f7fe fbe3 	bl	8001a84 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ce:	d03b      	beq.n	8003348 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0220 	bic.w	r2, r2, #32
 80032de:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0202 	bic.w	r2, r2, #2
 80032ee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	2164      	movs	r1, #100	@ 0x64
 80032f4:	6978      	ldr	r0, [r7, #20]
 80032f6:	f000 f8e3 	bl	80034c0 <SPI_EndRxTxTransaction>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003340:	6978      	ldr	r0, [r7, #20]
 8003342:	f7ff ffa9 	bl	8003298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003346:	e002      	b.n	800334e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7fd fd2f 	bl	8000dac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff ff8e 	bl	8003284 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0203 	bic.w	r2, r2, #3
 800338c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ff78 	bl	8003298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033c0:	f7fe fb60 	bl	8001a84 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033d0:	f7fe fb58 	bl	8001a84 <HAL_GetTick>
 80033d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033d6:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	015b      	lsls	r3, r3, #5
 80033dc:	0d1b      	lsrs	r3, r3, #20
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e6:	e055      	b.n	8003494 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d051      	beq.n	8003494 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033f0:	f7fe fb48 	bl	8001a84 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d902      	bls.n	8003406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d13d      	bne.n	8003482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341e:	d111      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	d004      	beq.n	8003434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003432:	d107      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344c:	d10f      	bne.n	800346e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800346c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e018      	b.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e002      	b.n	8003494 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3b01      	subs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d19a      	bne.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000004 	.word	0x20000004

080034c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2201      	movs	r2, #1
 80034d4:	2102      	movs	r1, #2
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff ff6a 	bl	80033b0 <SPI_WaitFlagStateUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e032      	b.n	8003558 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <SPI_EndRxTxTransaction+0xa0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <SPI_EndRxTxTransaction+0xa4>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	0d5b      	lsrs	r3, r3, #21
 80034fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003510:	d112      	bne.n	8003538 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	@ 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff ff47 	bl	80033b0 <SPI_WaitFlagStateUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d016      	beq.n	8003556 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e00f      	b.n	8003558 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3b01      	subs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354e:	2b80      	cmp	r3, #128	@ 0x80
 8003550:	d0f2      	beq.n	8003538 <SPI_EndRxTxTransaction+0x78>
 8003552:	e000      	b.n	8003556 <SPI_EndRxTxTransaction+0x96>
        break;
 8003554:	bf00      	nop
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000004 	.word	0x20000004
 8003564:	165e9f81 	.word	0x165e9f81

08003568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fffa 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 fe2a 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d001      	beq.n	8003620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e03c      	b.n	800369a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1e      	ldr	r2, [pc, #120]	@ (80036a8 <HAL_TIM_Base_Start+0xa0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	@ (80036ac <HAL_TIM_Base_Start+0xa4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	@ (80036b0 <HAL_TIM_Base_Start+0xa8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	@ (80036b4 <HAL_TIM_Base_Start+0xac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start+0x5c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	@ (80036b8 <HAL_TIM_Base_Start+0xb0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f839 	bl	800375a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fd80 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_TIM_OC_Start_IT+0x28>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e022      	b.n	80037de <HAL_TIM_OC_Start_IT+0x6e>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d109      	bne.n	80037b2 <HAL_TIM_OC_Start_IT+0x42>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e015      	b.n	80037de <HAL_TIM_OC_Start_IT+0x6e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d109      	bne.n	80037cc <HAL_TIM_OC_Start_IT+0x5c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e008      	b.n	80037de <HAL_TIM_OC_Start_IT+0x6e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0b3      	b.n	800394e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_OC_Start_IT+0x86>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f4:	e013      	b.n	800381e <HAL_TIM_OC_Start_IT+0xae>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_OC_Start_IT+0x96>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003804:	e00b      	b.n	800381e <HAL_TIM_OC_Start_IT+0xae>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_TIM_OC_Start_IT+0xa6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	e003      	b.n	800381e <HAL_TIM_OC_Start_IT+0xae>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d841      	bhi.n	80038a8 <HAL_TIM_OC_Start_IT+0x138>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <HAL_TIM_OC_Start_IT+0xbc>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003861 	.word	0x08003861
 8003830:	080038a9 	.word	0x080038a9
 8003834:	080038a9 	.word	0x080038a9
 8003838:	080038a9 	.word	0x080038a9
 800383c:	08003873 	.word	0x08003873
 8003840:	080038a9 	.word	0x080038a9
 8003844:	080038a9 	.word	0x080038a9
 8003848:	080038a9 	.word	0x080038a9
 800384c:	08003885 	.word	0x08003885
 8003850:	080038a9 	.word	0x080038a9
 8003854:	080038a9 	.word	0x080038a9
 8003858:	080038a9 	.word	0x080038a9
 800385c:	08003897 	.word	0x08003897
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0202 	orr.w	r2, r2, #2
 800386e:	60da      	str	r2, [r3, #12]
      break;
 8003870:	e01d      	b.n	80038ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0204 	orr.w	r2, r2, #4
 8003880:	60da      	str	r2, [r3, #12]
      break;
 8003882:	e014      	b.n	80038ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	60da      	str	r2, [r3, #12]
      break;
 8003894:	e00b      	b.n	80038ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0210 	orr.w	r2, r2, #16
 80038a4:	60da      	str	r2, [r3, #12]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      break;
 80038ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d14b      	bne.n	800394c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 ffdc 	bl	800487a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a24      	ldr	r2, [pc, #144]	@ (8003958 <HAL_TIM_OC_Start_IT+0x1e8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <HAL_TIM_OC_Start_IT+0x1e8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_TIM_OC_Start_IT+0x1a8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ee:	d013      	beq.n	8003918 <HAL_TIM_OC_Start_IT+0x1a8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a19      	ldr	r2, [pc, #100]	@ (800395c <HAL_TIM_OC_Start_IT+0x1ec>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_TIM_OC_Start_IT+0x1a8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_TIM_OC_Start_IT+0x1a8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a16      	ldr	r2, [pc, #88]	@ (8003964 <HAL_TIM_OC_Start_IT+0x1f4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_OC_Start_IT+0x1a8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a15      	ldr	r2, [pc, #84]	@ (8003968 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d111      	bne.n	800393c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d010      	beq.n	800394c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393a:	e007      	b.n	800394c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40014000 	.word	0x40014000

0800396c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f839 	bl	8003a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fc28 	bl	8004200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x24>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e022      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d109      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x3e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e015      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d109      	bne.n	8003a78 <HAL_TIM_PWM_Start+0x58>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e008      	b.n	8003a8a <HAL_TIM_PWM_Start+0x6a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e068      	b.n	8003b64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x82>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aa0:	e013      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x92>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fed1 	bl	800487a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <HAL_TIM_PWM_Start+0x14c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_TIM_PWM_Start+0x14c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d013      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <HAL_TIM_PWM_Start+0x150>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <HAL_TIM_PWM_Start+0x154>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	@ (8003b78 <HAL_TIM_PWM_Start+0x158>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIM_PWM_Start+0x10e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_TIM_PWM_Start+0x15c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d010      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	e007      	b.n	8003b62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0202 	mvn.w	r2, #2
 8003bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 faf9 	bl	80041c2 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd f8d0 	bl	8000d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fafc 	bl	80041d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0204 	mvn.w	r2, #4
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fad3 	bl	80041c2 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f8aa 	bl	8000d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fad6 	bl	80041d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0208 	mvn.w	r2, #8
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2204      	movs	r2, #4
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 faad 	bl	80041c2 <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd f884 	bl	8000d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fab0 	bl	80041d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d020      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01b      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0210 	mvn.w	r2, #16
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa87 	bl	80041c2 <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd f85e 	bl	8000d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa8a 	bl	80041d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa61 	bl	80041ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fe52 	bl	80049b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa5b 	bl	80041ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0220 	mvn.w	r2, #32
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fe24 	bl	80049a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e048      	b.n	8003e10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d839      	bhi.n	8003e00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003de5 	.word	0x08003de5
 8003db8:	08003e01 	.word	0x08003e01
 8003dbc:	08003e01 	.word	0x08003e01
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fa9c 	bl	800430c <TIM_OC1_SetConfig>
      break;
 8003dd4:	e017      	b.n	8003e06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fafb 	bl	80043d8 <TIM_OC2_SetConfig>
      break;
 8003de2:	e010      	b.n	8003e06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb60 	bl	80044b0 <TIM_OC3_SetConfig>
      break;
 8003df0:	e009      	b.n	8003e06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fbc3 	bl	8004584 <TIM_OC4_SetConfig>
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ae      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	f200 809f 	bhi.w	8003f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e46:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003f85 	.word	0x08003f85
 8003e54:	08003f85 	.word	0x08003f85
 8003e58:	08003f85 	.word	0x08003f85
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003f85 	.word	0x08003f85
 8003e64:	08003f85 	.word	0x08003f85
 8003e68:	08003f85 	.word	0x08003f85
 8003e6c:	08003f03 	.word	0x08003f03
 8003e70:	08003f85 	.word	0x08003f85
 8003e74:	08003f85 	.word	0x08003f85
 8003e78:	08003f85 	.word	0x08003f85
 8003e7c:	08003f43 	.word	0x08003f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa40 	bl	800430c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e064      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fa86 	bl	80043d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
      break;
 8003f00:	e043      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fad1 	bl	80044b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0204 	bic.w	r2, r2, #4
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
      break;
 8003f40:	e023      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fb1b 	bl	8004584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	021a      	lsls	r2, r3, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0b4      	b.n	8004122 <HAL_TIM_ConfigClockSource+0x186>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d03e      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xd4>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff6:	f200 8087 	bhi.w	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffe:	f000 8086 	beq.w	800410e <HAL_TIM_ConfigClockSource+0x172>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004006:	d87f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b70      	cmp	r3, #112	@ 0x70
 800400a:	d01a      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xa6>
 800400c:	2b70      	cmp	r3, #112	@ 0x70
 800400e:	d87b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b60      	cmp	r3, #96	@ 0x60
 8004012:	d050      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004014:	2b60      	cmp	r3, #96	@ 0x60
 8004016:	d877      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b50      	cmp	r3, #80	@ 0x50
 800401a:	d03c      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xfa>
 800401c:	2b50      	cmp	r3, #80	@ 0x50
 800401e:	d873      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d058      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004024:	2b40      	cmp	r3, #64	@ 0x40
 8004026:	d86f      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b30      	cmp	r3, #48	@ 0x30
 800402a:	d064      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 800402c:	2b30      	cmp	r3, #48	@ 0x30
 800402e:	d86b      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d060      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d867      	bhi.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d05a      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	e062      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004052:	f000 fbf2 	bl	800483a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	609a      	str	r2, [r3, #8]
      break;
 800406e:	e04f      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004080:	f000 fbdb 	bl	800483a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004092:	609a      	str	r2, [r3, #8]
      break;
 8004094:	e03c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 fb4f 	bl	8004746 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2150      	movs	r1, #80	@ 0x50
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fba8 	bl	8004804 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e02c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fb6e 	bl	80047a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2160      	movs	r1, #96	@ 0x60
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb98 	bl	8004804 <TIM_ITRx_SetConfig>
      break;
 80040d4:	e01c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fb2f 	bl	8004746 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2140      	movs	r1, #64	@ 0x40
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fb88 	bl	8004804 <TIM_ITRx_SetConfig>
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fb7f 	bl	8004804 <TIM_ITRx_SetConfig>
      break;
 8004106:	e003      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e000      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800410e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_SlaveConfigSynchro+0x18>
 800413e:	2302      	movs	r3, #2
 8004140:	e031      	b.n	80041a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa65 	bl	8004624 <TIM_SlaveTimer_SetConfig>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e018      	b.n	80041a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004182:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004192:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a37      	ldr	r2, [pc, #220]	@ (80042f0 <TIM_Base_SetConfig+0xf0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00f      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421e:	d00b      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a34      	ldr	r2, [pc, #208]	@ (80042f4 <TIM_Base_SetConfig+0xf4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a33      	ldr	r2, [pc, #204]	@ (80042f8 <TIM_Base_SetConfig+0xf8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a32      	ldr	r2, [pc, #200]	@ (80042fc <TIM_Base_SetConfig+0xfc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a28      	ldr	r2, [pc, #160]	@ (80042f0 <TIM_Base_SetConfig+0xf0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01b      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004258:	d017      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	@ (80042f4 <TIM_Base_SetConfig+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <TIM_Base_SetConfig+0xf8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00f      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	@ (80042fc <TIM_Base_SetConfig+0xfc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <TIM_Base_SetConfig+0x100>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <TIM_Base_SetConfig+0x104>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <TIM_Base_SetConfig+0x108>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a0c      	ldr	r2, [pc, #48]	@ (80042f0 <TIM_Base_SetConfig+0xf0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d103      	bne.n	80042ca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0302 	bic.w	r3, r3, #2
 8004354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1c      	ldr	r2, [pc, #112]	@ (80043d4 <TIM_OC1_SetConfig+0xc8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a13      	ldr	r2, [pc, #76]	@ (80043d4 <TIM_OC1_SetConfig+0xc8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	621a      	str	r2, [r3, #32]
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40010000 	.word	0x40010000

080043d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f023 0210 	bic.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <TIM_OC2_SetConfig+0xd4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10d      	bne.n	8004454 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800443e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <TIM_OC2_SetConfig+0xd4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d113      	bne.n	8004484 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40010000 	.word	0x40010000

080044b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <TIM_OC3_SetConfig+0xd0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10d      	bne.n	800452a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <TIM_OC3_SetConfig+0xd0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d113      	bne.n	800455a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40010000 	.word	0x40010000

08004584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	031b      	lsls	r3, r3, #12
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a10      	ldr	r2, [pc, #64]	@ (8004620 <TIM_OC4_SetConfig+0x9c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d109      	bne.n	80045f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	019b      	lsls	r3, r3, #6
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000

08004624 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004640:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b70      	cmp	r3, #112	@ 0x70
 800466c:	d01a      	beq.n	80046a4 <TIM_SlaveTimer_SetConfig+0x80>
 800466e:	2b70      	cmp	r3, #112	@ 0x70
 8004670:	d860      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 8004672:	2b60      	cmp	r3, #96	@ 0x60
 8004674:	d054      	beq.n	8004720 <TIM_SlaveTimer_SetConfig+0xfc>
 8004676:	2b60      	cmp	r3, #96	@ 0x60
 8004678:	d85c      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 800467a:	2b50      	cmp	r3, #80	@ 0x50
 800467c:	d046      	beq.n	800470c <TIM_SlaveTimer_SetConfig+0xe8>
 800467e:	2b50      	cmp	r3, #80	@ 0x50
 8004680:	d858      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d019      	beq.n	80046ba <TIM_SlaveTimer_SetConfig+0x96>
 8004686:	2b40      	cmp	r3, #64	@ 0x40
 8004688:	d854      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d055      	beq.n	800473a <TIM_SlaveTimer_SetConfig+0x116>
 800468e:	2b30      	cmp	r3, #48	@ 0x30
 8004690:	d850      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d051      	beq.n	800473a <TIM_SlaveTimer_SetConfig+0x116>
 8004696:	2b20      	cmp	r3, #32
 8004698:	d84c      	bhi.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04d      	beq.n	800473a <TIM_SlaveTimer_SetConfig+0x116>
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d04b      	beq.n	800473a <TIM_SlaveTimer_SetConfig+0x116>
 80046a2:	e047      	b.n	8004734 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	f000 f8c1 	bl	800483a <TIM_ETR_SetConfig>
      break;
 80046b8:	e040      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d101      	bne.n	80046c6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e03b      	b.n	800473e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
      break;
 800470a:	e017      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004718:	461a      	mov	r2, r3
 800471a:	f000 f814 	bl	8004746 <TIM_TI1_ConfigInputStage>
      break;
 800471e:	e00d      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800472c:	461a      	mov	r2, r3
 800472e:	f000 f839 	bl	80047a4 <TIM_TI2_ConfigInputStage>
      break;
 8004732:	e003      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
      break;
 8004738:	e000      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800473a:	bf00      	nop
  }

  return status;
 800473c:	7dfb      	ldrb	r3, [r7, #23]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004746:	b480      	push	{r7}
 8004748:	b087      	sub	sp, #28
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0201 	bic.w	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 030a 	bic.w	r3, r3, #10
 8004782:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	031b      	lsls	r3, r3, #12
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	f043 0307 	orr.w	r3, r3, #7
 8004826:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	609a      	str	r2, [r3, #8]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2201      	movs	r2, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	43db      	mvns	r3, r3
 800489c:	401a      	ands	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e050      	b.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004928:	d013      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a16      	ldr	r2, [pc, #88]	@ (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a15      	ldr	r2, [pc, #84]	@ (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	@ (800499c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10c      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40014000 	.word	0x40014000

080049a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e042      	b.n	8004a60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fe6c 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2224      	movs	r2, #36	@ 0x24
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f82b 	bl	8004a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a6c:	b0c0      	sub	sp, #256	@ 0x100
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a84:	68d9      	ldr	r1, [r3, #12]
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	ea40 0301 	orr.w	r3, r0, r1
 8004a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ac0:	f021 010c 	bic.w	r1, r1, #12
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae2:	6999      	ldr	r1, [r3, #24]
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	ea40 0301 	orr.w	r3, r0, r1
 8004aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b8f      	ldr	r3, [pc, #572]	@ (8004d34 <UART_SetConfig+0x2cc>)
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d005      	beq.n	8004b08 <UART_SetConfig+0xa0>
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b8d      	ldr	r3, [pc, #564]	@ (8004d38 <UART_SetConfig+0x2d0>)
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d104      	bne.n	8004b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b08:	f7fe fa6c 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 8004b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b10:	e003      	b.n	8004b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b12:	f7fe fa53 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8004b16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b24:	f040 810c 	bne.w	8004d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	1891      	adds	r1, r2, r2
 8004b40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b42:	415b      	adcs	r3, r3
 8004b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	eb12 0801 	adds.w	r8, r2, r1
 8004b50:	4629      	mov	r1, r5
 8004b52:	eb43 0901 	adc.w	r9, r3, r1
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	4623      	mov	r3, r4
 8004b70:	eb18 0303 	adds.w	r3, r8, r3
 8004b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b78:	462b      	mov	r3, r5
 8004b7a:	eb49 0303 	adc.w	r3, r9, r3
 8004b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b96:	460b      	mov	r3, r1
 8004b98:	18db      	adds	r3, r3, r3
 8004b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ba2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bac:	f7fb fb68 	bl	8000280 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4b61      	ldr	r3, [pc, #388]	@ (8004d3c <UART_SetConfig+0x2d4>)
 8004bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	011c      	lsls	r4, r3, #4
 8004bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004be0:	4641      	mov	r1, r8
 8004be2:	eb12 0a01 	adds.w	sl, r2, r1
 8004be6:	4649      	mov	r1, r9
 8004be8:	eb43 0b01 	adc.w	fp, r3, r1
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c00:	4692      	mov	sl, r2
 8004c02:	469b      	mov	fp, r3
 8004c04:	4643      	mov	r3, r8
 8004c06:	eb1a 0303 	adds.w	r3, sl, r3
 8004c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	eb4b 0303 	adc.w	r3, fp, r3
 8004c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	18db      	adds	r3, r3, r3
 8004c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c32:	4613      	mov	r3, r2
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c42:	f7fb fb1d 	bl	8000280 <__aeabi_uldivmod>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d3c <UART_SetConfig+0x2d4>)
 8004c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2264      	movs	r2, #100	@ 0x64
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	1acb      	subs	r3, r1, r3
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c62:	4b36      	ldr	r3, [pc, #216]	@ (8004d3c <UART_SetConfig+0x2d4>)
 8004c64:	fba3 2302 	umull	r2, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c70:	441c      	add	r4, r3
 8004c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c94:	4641      	mov	r1, r8
 8004c96:	1851      	adds	r1, r2, r1
 8004c98:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	414b      	adcs	r3, r1
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cac:	4659      	mov	r1, fp
 8004cae:	00cb      	lsls	r3, r1, #3
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	00ca      	lsls	r2, r1, #3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc8:	464b      	mov	r3, r9
 8004cca:	460a      	mov	r2, r1
 8004ccc:	eb42 0303 	adc.w	r3, r2, r3
 8004cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ce8:	460b      	mov	r3, r1
 8004cea:	18db      	adds	r3, r3, r3
 8004cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cee:	4613      	mov	r3, r2
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cfe:	f7fb fabf 	bl	8000280 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <UART_SetConfig+0x2d4>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	@ 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	3332      	adds	r3, #50	@ 0x32
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <UART_SetConfig+0x2d4>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 0207 	and.w	r2, r3, #7
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4422      	add	r2, r4
 8004d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d30:	e106      	b.n	8004f40 <UART_SetConfig+0x4d8>
 8004d32:	bf00      	nop
 8004d34:	40011000 	.word	0x40011000
 8004d38:	40011400 	.word	0x40011400
 8004d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d52:	4642      	mov	r2, r8
 8004d54:	464b      	mov	r3, r9
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	6239      	str	r1, [r7, #32]
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d62:	4641      	mov	r1, r8
 8004d64:	1854      	adds	r4, r2, r1
 8004d66:	4649      	mov	r1, r9
 8004d68:	eb43 0501 	adc.w	r5, r3, r1
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	00eb      	lsls	r3, r5, #3
 8004d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d7a:	00e2      	lsls	r2, r4, #3
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
 8004d80:	4643      	mov	r3, r8
 8004d82:	18e3      	adds	r3, r4, r3
 8004d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d88:	464b      	mov	r3, r9
 8004d8a:	eb45 0303 	adc.w	r3, r5, r3
 8004d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dae:	4629      	mov	r1, r5
 8004db0:	008b      	lsls	r3, r1, #2
 8004db2:	4621      	mov	r1, r4
 8004db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db8:	4621      	mov	r1, r4
 8004dba:	008a      	lsls	r2, r1, #2
 8004dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004dc0:	f7fb fa5e 	bl	8000280 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <UART_SetConfig+0x4e4>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	011c      	lsls	r4, r3, #4
 8004dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ddc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	1891      	adds	r1, r2, r2
 8004dea:	61b9      	str	r1, [r7, #24]
 8004dec:	415b      	adcs	r3, r3
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df4:	4641      	mov	r1, r8
 8004df6:	1851      	adds	r1, r2, r1
 8004df8:	6139      	str	r1, [r7, #16]
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	414b      	adcs	r3, r1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	00cb      	lsls	r3, r1, #3
 8004e10:	4651      	mov	r1, sl
 8004e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e16:	4651      	mov	r1, sl
 8004e18:	00ca      	lsls	r2, r1, #3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4642      	mov	r2, r8
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e28:	464b      	mov	r3, r9
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	eb42 0303 	adc.w	r3, r2, r3
 8004e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	008b      	lsls	r3, r1, #2
 8004e50:	4641      	mov	r1, r8
 8004e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e56:	4641      	mov	r1, r8
 8004e58:	008a      	lsls	r2, r1, #2
 8004e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e5e:	f7fb fa0f 	bl	8000280 <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	4b38      	ldr	r3, [pc, #224]	@ (8004f4c <UART_SetConfig+0x4e4>)
 8004e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2264      	movs	r2, #100	@ 0x64
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	1acb      	subs	r3, r1, r3
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	3332      	adds	r3, #50	@ 0x32
 8004e7c:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <UART_SetConfig+0x4e4>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e88:	441c      	add	r4, r3
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e92:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	1851      	adds	r1, r2, r1
 8004eac:	6039      	str	r1, [r7, #0]
 8004eae:	4649      	mov	r1, r9
 8004eb0:	414b      	adcs	r3, r1
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4651      	mov	r1, sl
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eda:	464b      	mov	r3, r9
 8004edc:	460a      	mov	r2, r1
 8004ede:	eb42 0303 	adc.w	r3, r2, r3
 8004ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eee:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004efc:	4649      	mov	r1, r9
 8004efe:	008b      	lsls	r3, r1, #2
 8004f00:	4641      	mov	r1, r8
 8004f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f06:	4641      	mov	r1, r8
 8004f08:	008a      	lsls	r2, r1, #2
 8004f0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f0e:	f7fb f9b7 	bl	8000280 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <UART_SetConfig+0x4e4>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	2164      	movs	r1, #100	@ 0x64
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	3332      	adds	r3, #50	@ 0x32
 8004f2a:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <UART_SetConfig+0x4e4>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	f003 020f 	and.w	r2, r3, #15
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4422      	add	r2, r4
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4c:	51eb851f 	.word	0x51eb851f

08004f50 <std>:
 8004f50:	2300      	movs	r3, #0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4604      	mov	r4, r0
 8004f56:	e9c0 3300 	strd	r3, r3, [r0]
 8004f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5e:	6083      	str	r3, [r0, #8]
 8004f60:	8181      	strh	r1, [r0, #12]
 8004f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f64:	81c2      	strh	r2, [r0, #14]
 8004f66:	6183      	str	r3, [r0, #24]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	305c      	adds	r0, #92	@ 0x5c
 8004f6e:	f000 fa01 	bl	8005374 <memset>
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <std+0x58>)
 8004f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x5c>)
 8004f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <std+0x60>)
 8004f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x64>)
 8004f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f82:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <std+0x68>)
 8004f84:	6224      	str	r4, [r4, #32]
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d006      	beq.n	8004f98 <std+0x48>
 8004f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f8e:	4294      	cmp	r4, r2
 8004f90:	d002      	beq.n	8004f98 <std+0x48>
 8004f92:	33d0      	adds	r3, #208	@ 0xd0
 8004f94:	429c      	cmp	r4, r3
 8004f96:	d105      	bne.n	8004fa4 <std+0x54>
 8004f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa0:	f000 ba60 	b.w	8005464 <__retarget_lock_init_recursive>
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	080051c5 	.word	0x080051c5
 8004fac:	080051e7 	.word	0x080051e7
 8004fb0:	0800521f 	.word	0x0800521f
 8004fb4:	08005243 	.word	0x08005243
 8004fb8:	20009850 	.word	0x20009850

08004fbc <stdio_exit_handler>:
 8004fbc:	4a02      	ldr	r2, [pc, #8]	@ (8004fc8 <stdio_exit_handler+0xc>)
 8004fbe:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <stdio_exit_handler+0x10>)
 8004fc0:	4803      	ldr	r0, [pc, #12]	@ (8004fd0 <stdio_exit_handler+0x14>)
 8004fc2:	f000 b869 	b.w	8005098 <_fwalk_sglue>
 8004fc6:	bf00      	nop
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	08005d01 	.word	0x08005d01
 8004fd0:	20000020 	.word	0x20000020

08004fd4 <cleanup_stdio>:
 8004fd4:	6841      	ldr	r1, [r0, #4]
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <cleanup_stdio+0x34>)
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	d001      	beq.n	8004fe4 <cleanup_stdio+0x10>
 8004fe0:	f000 fe8e 	bl	8005d00 <_fflush_r>
 8004fe4:	68a1      	ldr	r1, [r4, #8]
 8004fe6:	4b09      	ldr	r3, [pc, #36]	@ (800500c <cleanup_stdio+0x38>)
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	d002      	beq.n	8004ff2 <cleanup_stdio+0x1e>
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 fe87 	bl	8005d00 <_fflush_r>
 8004ff2:	68e1      	ldr	r1, [r4, #12]
 8004ff4:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <cleanup_stdio+0x3c>)
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	d004      	beq.n	8005004 <cleanup_stdio+0x30>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f000 be7e 	b.w	8005d00 <_fflush_r>
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
 8005008:	20009850 	.word	0x20009850
 800500c:	200098b8 	.word	0x200098b8
 8005010:	20009920 	.word	0x20009920

08005014 <global_stdio_init.part.0>:
 8005014:	b510      	push	{r4, lr}
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <global_stdio_init.part.0+0x30>)
 8005018:	4c0b      	ldr	r4, [pc, #44]	@ (8005048 <global_stdio_init.part.0+0x34>)
 800501a:	4a0c      	ldr	r2, [pc, #48]	@ (800504c <global_stdio_init.part.0+0x38>)
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	4620      	mov	r0, r4
 8005020:	2200      	movs	r2, #0
 8005022:	2104      	movs	r1, #4
 8005024:	f7ff ff94 	bl	8004f50 <std>
 8005028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800502c:	2201      	movs	r2, #1
 800502e:	2109      	movs	r1, #9
 8005030:	f7ff ff8e 	bl	8004f50 <std>
 8005034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005038:	2202      	movs	r2, #2
 800503a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503e:	2112      	movs	r1, #18
 8005040:	f7ff bf86 	b.w	8004f50 <std>
 8005044:	20009988 	.word	0x20009988
 8005048:	20009850 	.word	0x20009850
 800504c:	08004fbd 	.word	0x08004fbd

08005050 <__sfp_lock_acquire>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__sfp_lock_acquire+0x8>)
 8005052:	f000 ba08 	b.w	8005466 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20009991 	.word	0x20009991

0800505c <__sfp_lock_release>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__sfp_lock_release+0x8>)
 800505e:	f000 ba03 	b.w	8005468 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20009991 	.word	0x20009991

08005068 <__sinit>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	f7ff fff0 	bl	8005050 <__sfp_lock_acquire>
 8005070:	6a23      	ldr	r3, [r4, #32]
 8005072:	b11b      	cbz	r3, 800507c <__sinit+0x14>
 8005074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005078:	f7ff bff0 	b.w	800505c <__sfp_lock_release>
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__sinit+0x28>)
 800507e:	6223      	str	r3, [r4, #32]
 8005080:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <__sinit+0x2c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f5      	bne.n	8005074 <__sinit+0xc>
 8005088:	f7ff ffc4 	bl	8005014 <global_stdio_init.part.0>
 800508c:	e7f2      	b.n	8005074 <__sinit+0xc>
 800508e:	bf00      	nop
 8005090:	08004fd5 	.word	0x08004fd5
 8005094:	20009988 	.word	0x20009988

08005098 <_fwalk_sglue>:
 8005098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509c:	4607      	mov	r7, r0
 800509e:	4688      	mov	r8, r1
 80050a0:	4614      	mov	r4, r2
 80050a2:	2600      	movs	r6, #0
 80050a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a8:	f1b9 0901 	subs.w	r9, r9, #1
 80050ac:	d505      	bpl.n	80050ba <_fwalk_sglue+0x22>
 80050ae:	6824      	ldr	r4, [r4, #0]
 80050b0:	2c00      	cmp	r4, #0
 80050b2:	d1f7      	bne.n	80050a4 <_fwalk_sglue+0xc>
 80050b4:	4630      	mov	r0, r6
 80050b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ba:	89ab      	ldrh	r3, [r5, #12]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d907      	bls.n	80050d0 <_fwalk_sglue+0x38>
 80050c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c4:	3301      	adds	r3, #1
 80050c6:	d003      	beq.n	80050d0 <_fwalk_sglue+0x38>
 80050c8:	4629      	mov	r1, r5
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	4306      	orrs	r6, r0
 80050d0:	3568      	adds	r5, #104	@ 0x68
 80050d2:	e7e9      	b.n	80050a8 <_fwalk_sglue+0x10>

080050d4 <iprintf>:
 80050d4:	b40f      	push	{r0, r1, r2, r3}
 80050d6:	b507      	push	{r0, r1, r2, lr}
 80050d8:	4906      	ldr	r1, [pc, #24]	@ (80050f4 <iprintf+0x20>)
 80050da:	ab04      	add	r3, sp, #16
 80050dc:	6808      	ldr	r0, [r1, #0]
 80050de:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e2:	6881      	ldr	r1, [r0, #8]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	f000 fae3 	bl	80056b0 <_vfiprintf_r>
 80050ea:	b003      	add	sp, #12
 80050ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80050f0:	b004      	add	sp, #16
 80050f2:	4770      	bx	lr
 80050f4:	2000001c 	.word	0x2000001c

080050f8 <putchar>:
 80050f8:	4b02      	ldr	r3, [pc, #8]	@ (8005104 <putchar+0xc>)
 80050fa:	4601      	mov	r1, r0
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	6882      	ldr	r2, [r0, #8]
 8005100:	f000 be88 	b.w	8005e14 <_putc_r>
 8005104:	2000001c 	.word	0x2000001c

08005108 <_puts_r>:
 8005108:	6a03      	ldr	r3, [r0, #32]
 800510a:	b570      	push	{r4, r5, r6, lr}
 800510c:	6884      	ldr	r4, [r0, #8]
 800510e:	4605      	mov	r5, r0
 8005110:	460e      	mov	r6, r1
 8005112:	b90b      	cbnz	r3, 8005118 <_puts_r+0x10>
 8005114:	f7ff ffa8 	bl	8005068 <__sinit>
 8005118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d405      	bmi.n	800512a <_puts_r+0x22>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	0598      	lsls	r0, r3, #22
 8005122:	d402      	bmi.n	800512a <_puts_r+0x22>
 8005124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005126:	f000 f99e 	bl	8005466 <__retarget_lock_acquire_recursive>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0719      	lsls	r1, r3, #28
 800512e:	d502      	bpl.n	8005136 <_puts_r+0x2e>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d135      	bne.n	80051a2 <_puts_r+0x9a>
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f000 f8c5 	bl	80052c8 <__swsetup_r>
 800513e:	b380      	cbz	r0, 80051a2 <_puts_r+0x9a>
 8005140:	f04f 35ff 	mov.w	r5, #4294967295
 8005144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005146:	07da      	lsls	r2, r3, #31
 8005148:	d405      	bmi.n	8005156 <_puts_r+0x4e>
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	059b      	lsls	r3, r3, #22
 800514e:	d402      	bmi.n	8005156 <_puts_r+0x4e>
 8005150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005152:	f000 f989 	bl	8005468 <__retarget_lock_release_recursive>
 8005156:	4628      	mov	r0, r5
 8005158:	bd70      	pop	{r4, r5, r6, pc}
 800515a:	2b00      	cmp	r3, #0
 800515c:	da04      	bge.n	8005168 <_puts_r+0x60>
 800515e:	69a2      	ldr	r2, [r4, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	dc17      	bgt.n	8005194 <_puts_r+0x8c>
 8005164:	290a      	cmp	r1, #10
 8005166:	d015      	beq.n	8005194 <_puts_r+0x8c>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	7019      	strb	r1, [r3, #0]
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005176:	3b01      	subs	r3, #1
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	2900      	cmp	r1, #0
 800517c:	d1ed      	bne.n	800515a <_puts_r+0x52>
 800517e:	2b00      	cmp	r3, #0
 8005180:	da11      	bge.n	80051a6 <_puts_r+0x9e>
 8005182:	4622      	mov	r2, r4
 8005184:	210a      	movs	r1, #10
 8005186:	4628      	mov	r0, r5
 8005188:	f000 f85f 	bl	800524a <__swbuf_r>
 800518c:	3001      	adds	r0, #1
 800518e:	d0d7      	beq.n	8005140 <_puts_r+0x38>
 8005190:	250a      	movs	r5, #10
 8005192:	e7d7      	b.n	8005144 <_puts_r+0x3c>
 8005194:	4622      	mov	r2, r4
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f857 	bl	800524a <__swbuf_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d1e7      	bne.n	8005170 <_puts_r+0x68>
 80051a0:	e7ce      	b.n	8005140 <_puts_r+0x38>
 80051a2:	3e01      	subs	r6, #1
 80051a4:	e7e4      	b.n	8005170 <_puts_r+0x68>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	6022      	str	r2, [r4, #0]
 80051ac:	220a      	movs	r2, #10
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e7ee      	b.n	8005190 <_puts_r+0x88>
	...

080051b4 <puts>:
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <puts+0xc>)
 80051b6:	4601      	mov	r1, r0
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f7ff bfa5 	b.w	8005108 <_puts_r>
 80051be:	bf00      	nop
 80051c0:	2000001c 	.word	0x2000001c

080051c4 <__sread>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	460c      	mov	r4, r1
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	f000 f8fc 	bl	80053c8 <_read_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	bfab      	itete	ge
 80051d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051d6:	89a3      	ldrhlt	r3, [r4, #12]
 80051d8:	181b      	addge	r3, r3, r0
 80051da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051de:	bfac      	ite	ge
 80051e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051e2:	81a3      	strhlt	r3, [r4, #12]
 80051e4:	bd10      	pop	{r4, pc}

080051e6 <__swrite>:
 80051e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	461f      	mov	r7, r3
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	05db      	lsls	r3, r3, #23
 80051f0:	4605      	mov	r5, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	4616      	mov	r6, r2
 80051f6:	d505      	bpl.n	8005204 <__swrite+0x1e>
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	2302      	movs	r3, #2
 80051fe:	2200      	movs	r2, #0
 8005200:	f000 f8d0 	bl	80053a4 <_lseek_r>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520e:	81a3      	strh	r3, [r4, #12]
 8005210:	4632      	mov	r2, r6
 8005212:	463b      	mov	r3, r7
 8005214:	4628      	mov	r0, r5
 8005216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	f000 b8e7 	b.w	80053ec <_write_r>

0800521e <__sseek>:
 800521e:	b510      	push	{r4, lr}
 8005220:	460c      	mov	r4, r1
 8005222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005226:	f000 f8bd 	bl	80053a4 <_lseek_r>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	bf15      	itete	ne
 8005230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800523a:	81a3      	strheq	r3, [r4, #12]
 800523c:	bf18      	it	ne
 800523e:	81a3      	strhne	r3, [r4, #12]
 8005240:	bd10      	pop	{r4, pc}

08005242 <__sclose>:
 8005242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005246:	f000 b89d 	b.w	8005384 <_close_r>

0800524a <__swbuf_r>:
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524c:	460e      	mov	r6, r1
 800524e:	4614      	mov	r4, r2
 8005250:	4605      	mov	r5, r0
 8005252:	b118      	cbz	r0, 800525c <__swbuf_r+0x12>
 8005254:	6a03      	ldr	r3, [r0, #32]
 8005256:	b90b      	cbnz	r3, 800525c <__swbuf_r+0x12>
 8005258:	f7ff ff06 	bl	8005068 <__sinit>
 800525c:	69a3      	ldr	r3, [r4, #24]
 800525e:	60a3      	str	r3, [r4, #8]
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	071a      	lsls	r2, r3, #28
 8005264:	d501      	bpl.n	800526a <__swbuf_r+0x20>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	b943      	cbnz	r3, 800527c <__swbuf_r+0x32>
 800526a:	4621      	mov	r1, r4
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f82b 	bl	80052c8 <__swsetup_r>
 8005272:	b118      	cbz	r0, 800527c <__swbuf_r+0x32>
 8005274:	f04f 37ff 	mov.w	r7, #4294967295
 8005278:	4638      	mov	r0, r7
 800527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	1a98      	subs	r0, r3, r2
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	b2f6      	uxtb	r6, r6
 8005286:	4283      	cmp	r3, r0
 8005288:	4637      	mov	r7, r6
 800528a:	dc05      	bgt.n	8005298 <__swbuf_r+0x4e>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fd36 	bl	8005d00 <_fflush_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	d1ed      	bne.n	8005274 <__swbuf_r+0x2a>
 8005298:	68a3      	ldr	r3, [r4, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	701e      	strb	r6, [r3, #0]
 80052a6:	6962      	ldr	r2, [r4, #20]
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d004      	beq.n	80052b8 <__swbuf_r+0x6e>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	07db      	lsls	r3, r3, #31
 80052b2:	d5e1      	bpl.n	8005278 <__swbuf_r+0x2e>
 80052b4:	2e0a      	cmp	r6, #10
 80052b6:	d1df      	bne.n	8005278 <__swbuf_r+0x2e>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fd20 	bl	8005d00 <_fflush_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0d9      	beq.n	8005278 <__swbuf_r+0x2e>
 80052c4:	e7d6      	b.n	8005274 <__swbuf_r+0x2a>
	...

080052c8 <__swsetup_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <__swsetup_r+0xa8>)
 80052cc:	4605      	mov	r5, r0
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	460c      	mov	r4, r1
 80052d2:	b118      	cbz	r0, 80052dc <__swsetup_r+0x14>
 80052d4:	6a03      	ldr	r3, [r0, #32]
 80052d6:	b90b      	cbnz	r3, 80052dc <__swsetup_r+0x14>
 80052d8:	f7ff fec6 	bl	8005068 <__sinit>
 80052dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e0:	0719      	lsls	r1, r3, #28
 80052e2:	d422      	bmi.n	800532a <__swsetup_r+0x62>
 80052e4:	06da      	lsls	r2, r3, #27
 80052e6:	d407      	bmi.n	80052f8 <__swsetup_r+0x30>
 80052e8:	2209      	movs	r2, #9
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	f04f 30ff 	mov.w	r0, #4294967295
 80052f6:	e033      	b.n	8005360 <__swsetup_r+0x98>
 80052f8:	0758      	lsls	r0, r3, #29
 80052fa:	d512      	bpl.n	8005322 <__swsetup_r+0x5a>
 80052fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052fe:	b141      	cbz	r1, 8005312 <__swsetup_r+0x4a>
 8005300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__swsetup_r+0x46>
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f8af 	bl	800546c <_free_r>
 800530e:	2300      	movs	r3, #0
 8005310:	6363      	str	r3, [r4, #52]	@ 0x34
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	2300      	movs	r3, #0
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	b94b      	cbnz	r3, 8005342 <__swsetup_r+0x7a>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005338:	d003      	beq.n	8005342 <__swsetup_r+0x7a>
 800533a:	4621      	mov	r1, r4
 800533c:	4628      	mov	r0, r5
 800533e:	f000 fd2d 	bl	8005d9c <__smakebuf_r>
 8005342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005346:	f013 0201 	ands.w	r2, r3, #1
 800534a:	d00a      	beq.n	8005362 <__swsetup_r+0x9a>
 800534c:	2200      	movs	r2, #0
 800534e:	60a2      	str	r2, [r4, #8]
 8005350:	6962      	ldr	r2, [r4, #20]
 8005352:	4252      	negs	r2, r2
 8005354:	61a2      	str	r2, [r4, #24]
 8005356:	6922      	ldr	r2, [r4, #16]
 8005358:	b942      	cbnz	r2, 800536c <__swsetup_r+0xa4>
 800535a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800535e:	d1c5      	bne.n	80052ec <__swsetup_r+0x24>
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	0799      	lsls	r1, r3, #30
 8005364:	bf58      	it	pl
 8005366:	6962      	ldrpl	r2, [r4, #20]
 8005368:	60a2      	str	r2, [r4, #8]
 800536a:	e7f4      	b.n	8005356 <__swsetup_r+0x8e>
 800536c:	2000      	movs	r0, #0
 800536e:	e7f7      	b.n	8005360 <__swsetup_r+0x98>
 8005370:	2000001c 	.word	0x2000001c

08005374 <memset>:
 8005374:	4402      	add	r2, r0
 8005376:	4603      	mov	r3, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <_close_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	@ (80053a0 <_close_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fc fa6b 	bl	800186a <_close>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_close_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_close_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	2000998c 	.word	0x2000998c

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	@ (80053c4 <_lseek_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc fa80 	bl	80018b8 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000998c 	.word	0x2000998c

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	@ (80053e8 <_read_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc fa0e 	bl	80017f8 <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	2000998c 	.word	0x2000998c

080053ec <_write_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	@ (800540c <_write_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc fa19 	bl	8001832 <_write>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_write_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_write_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	2000998c 	.word	0x2000998c

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	@ (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	2000001c 	.word	0x2000001c

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	@ (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	@ (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	@ (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	@ (8005460 <__libc_init_array+0x44>)
 8005430:	f000 fd56 	bl	8005ee0 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	080063ec 	.word	0x080063ec
 8005458:	080063ec 	.word	0x080063ec
 800545c:	080063ec 	.word	0x080063ec
 8005460:	080063f0 	.word	0x080063f0

08005464 <__retarget_lock_init_recursive>:
 8005464:	4770      	bx	lr

08005466 <__retarget_lock_acquire_recursive>:
 8005466:	4770      	bx	lr

08005468 <__retarget_lock_release_recursive>:
 8005468:	4770      	bx	lr
	...

0800546c <_free_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	d041      	beq.n	80054f8 <_free_r+0x8c>
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f0c      	subs	r4, r1, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	18e4      	addlt	r4, r4, r3
 8005480:	f000 f8e0 	bl	8005644 <__malloc_lock>
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <_free_r+0x90>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	b933      	cbnz	r3, 8005498 <_free_r+0x2c>
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005494:	f000 b8dc 	b.w	8005650 <__malloc_unlock>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d908      	bls.n	80054ae <_free_r+0x42>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	e7ed      	b.n	800548a <_free_r+0x1e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x4c>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x42>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1850      	adds	r0, r2, r1
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x6c>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4401      	add	r1, r0
 80054c4:	1850      	adds	r0, r2, r1
 80054c6:	4283      	cmp	r3, r0
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1e0      	bne.n	800548e <_free_r+0x22>
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6053      	str	r3, [r2, #4]
 80054d2:	4408      	add	r0, r1
 80054d4:	6010      	str	r0, [r2, #0]
 80054d6:	e7da      	b.n	800548e <_free_r+0x22>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x74>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d6      	b.n	800548e <_free_r+0x22>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf04      	itt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	bf04      	itt	eq
 80054f0:	1809      	addeq	r1, r1, r0
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	6054      	str	r4, [r2, #4]
 80054f6:	e7ca      	b.n	800548e <_free_r+0x22>
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	20009998 	.word	0x20009998

08005500 <sbrk_aligned>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4e0f      	ldr	r6, [pc, #60]	@ (8005540 <sbrk_aligned+0x40>)
 8005504:	460c      	mov	r4, r1
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	4605      	mov	r5, r0
 800550a:	b911      	cbnz	r1, 8005512 <sbrk_aligned+0x12>
 800550c:	f000 fcd8 	bl	8005ec0 <_sbrk_r>
 8005510:	6030      	str	r0, [r6, #0]
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f000 fcd3 	bl	8005ec0 <_sbrk_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	d103      	bne.n	8005526 <sbrk_aligned+0x26>
 800551e:	f04f 34ff 	mov.w	r4, #4294967295
 8005522:	4620      	mov	r0, r4
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d0f8      	beq.n	8005522 <sbrk_aligned+0x22>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fcc4 	bl	8005ec0 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d1f2      	bne.n	8005522 <sbrk_aligned+0x22>
 800553c:	e7ef      	b.n	800551e <sbrk_aligned+0x1e>
 800553e:	bf00      	nop
 8005540:	20009994 	.word	0x20009994

08005544 <_malloc_r>:
 8005544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005548:	1ccd      	adds	r5, r1, #3
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	2d00      	cmp	r5, #0
 8005558:	4606      	mov	r6, r0
 800555a:	db01      	blt.n	8005560 <_malloc_r+0x1c>
 800555c:	42a9      	cmp	r1, r5
 800555e:	d904      	bls.n	800556a <_malloc_r+0x26>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800556a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005640 <_malloc_r+0xfc>
 800556e:	f000 f869 	bl	8005644 <__malloc_lock>
 8005572:	f8d8 3000 	ldr.w	r3, [r8]
 8005576:	461c      	mov	r4, r3
 8005578:	bb44      	cbnz	r4, 80055cc <_malloc_r+0x88>
 800557a:	4629      	mov	r1, r5
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffbf 	bl	8005500 <sbrk_aligned>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	4604      	mov	r4, r0
 8005586:	d158      	bne.n	800563a <_malloc_r+0xf6>
 8005588:	f8d8 4000 	ldr.w	r4, [r8]
 800558c:	4627      	mov	r7, r4
 800558e:	2f00      	cmp	r7, #0
 8005590:	d143      	bne.n	800561a <_malloc_r+0xd6>
 8005592:	2c00      	cmp	r4, #0
 8005594:	d04b      	beq.n	800562e <_malloc_r+0xea>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	eb04 0903 	add.w	r9, r4, r3
 80055a0:	f000 fc8e 	bl	8005ec0 <_sbrk_r>
 80055a4:	4581      	cmp	r9, r0
 80055a6:	d142      	bne.n	800562e <_malloc_r+0xea>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	1a6d      	subs	r5, r5, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa6 	bl	8005500 <sbrk_aligned>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d03a      	beq.n	800562e <_malloc_r+0xea>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	442b      	add	r3, r5
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	f8d8 3000 	ldr.w	r3, [r8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	bb62      	cbnz	r2, 8005620 <_malloc_r+0xdc>
 80055c6:	f8c8 7000 	str.w	r7, [r8]
 80055ca:	e00f      	b.n	80055ec <_malloc_r+0xa8>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	1b52      	subs	r2, r2, r5
 80055d0:	d420      	bmi.n	8005614 <_malloc_r+0xd0>
 80055d2:	2a0b      	cmp	r2, #11
 80055d4:	d917      	bls.n	8005606 <_malloc_r+0xc2>
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	42a3      	cmp	r3, r4
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	6059      	strne	r1, [r3, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	bf08      	it	eq
 80055e4:	f8c8 1000 	streq.w	r1, [r8]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f82f 	bl	8005650 <__malloc_unlock>
 80055f2:	f104 000b 	add.w	r0, r4, #11
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	f020 0007 	bic.w	r0, r0, #7
 80055fc:	1ac2      	subs	r2, r0, r3
 80055fe:	bf1c      	itt	ne
 8005600:	1a1b      	subne	r3, r3, r0
 8005602:	50a3      	strne	r3, [r4, r2]
 8005604:	e7af      	b.n	8005566 <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	f8c8 2000 	streq.w	r2, [r8]
 8005610:	605a      	strne	r2, [r3, #4]
 8005612:	e7eb      	b.n	80055ec <_malloc_r+0xa8>
 8005614:	4623      	mov	r3, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7ae      	b.n	8005578 <_malloc_r+0x34>
 800561a:	463c      	mov	r4, r7
 800561c:	687f      	ldr	r7, [r7, #4]
 800561e:	e7b6      	b.n	800558e <_malloc_r+0x4a>
 8005620:	461a      	mov	r2, r3
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	42a3      	cmp	r3, r4
 8005626:	d1fb      	bne.n	8005620 <_malloc_r+0xdc>
 8005628:	2300      	movs	r3, #0
 800562a:	6053      	str	r3, [r2, #4]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa8>
 800562e:	230c      	movs	r3, #12
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f80c 	bl	8005650 <__malloc_unlock>
 8005638:	e794      	b.n	8005564 <_malloc_r+0x20>
 800563a:	6005      	str	r5, [r0, #0]
 800563c:	e7d6      	b.n	80055ec <_malloc_r+0xa8>
 800563e:	bf00      	nop
 8005640:	20009998 	.word	0x20009998

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	@ (800564c <__malloc_lock+0x8>)
 8005646:	f7ff bf0e 	b.w	8005466 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	20009990 	.word	0x20009990

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff bf09 	b.w	8005468 <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	20009990 	.word	0x20009990

0800565c <__sfputc_r>:
 800565c:	6893      	ldr	r3, [r2, #8]
 800565e:	3b01      	subs	r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	b410      	push	{r4}
 8005664:	6093      	str	r3, [r2, #8]
 8005666:	da08      	bge.n	800567a <__sfputc_r+0x1e>
 8005668:	6994      	ldr	r4, [r2, #24]
 800566a:	42a3      	cmp	r3, r4
 800566c:	db01      	blt.n	8005672 <__sfputc_r+0x16>
 800566e:	290a      	cmp	r1, #10
 8005670:	d103      	bne.n	800567a <__sfputc_r+0x1e>
 8005672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005676:	f7ff bde8 	b.w	800524a <__swbuf_r>
 800567a:	6813      	ldr	r3, [r2, #0]
 800567c:	1c58      	adds	r0, r3, #1
 800567e:	6010      	str	r0, [r2, #0]
 8005680:	7019      	strb	r1, [r3, #0]
 8005682:	4608      	mov	r0, r1
 8005684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005688:	4770      	bx	lr

0800568a <__sfputs_r>:
 800568a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568c:	4606      	mov	r6, r0
 800568e:	460f      	mov	r7, r1
 8005690:	4614      	mov	r4, r2
 8005692:	18d5      	adds	r5, r2, r3
 8005694:	42ac      	cmp	r4, r5
 8005696:	d101      	bne.n	800569c <__sfputs_r+0x12>
 8005698:	2000      	movs	r0, #0
 800569a:	e007      	b.n	80056ac <__sfputs_r+0x22>
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	463a      	mov	r2, r7
 80056a2:	4630      	mov	r0, r6
 80056a4:	f7ff ffda 	bl	800565c <__sfputc_r>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d1f3      	bne.n	8005694 <__sfputs_r+0xa>
 80056ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056b0 <_vfiprintf_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	460d      	mov	r5, r1
 80056b6:	b09d      	sub	sp, #116	@ 0x74
 80056b8:	4614      	mov	r4, r2
 80056ba:	4698      	mov	r8, r3
 80056bc:	4606      	mov	r6, r0
 80056be:	b118      	cbz	r0, 80056c8 <_vfiprintf_r+0x18>
 80056c0:	6a03      	ldr	r3, [r0, #32]
 80056c2:	b90b      	cbnz	r3, 80056c8 <_vfiprintf_r+0x18>
 80056c4:	f7ff fcd0 	bl	8005068 <__sinit>
 80056c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056ca:	07d9      	lsls	r1, r3, #31
 80056cc:	d405      	bmi.n	80056da <_vfiprintf_r+0x2a>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	059a      	lsls	r2, r3, #22
 80056d2:	d402      	bmi.n	80056da <_vfiprintf_r+0x2a>
 80056d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056d6:	f7ff fec6 	bl	8005466 <__retarget_lock_acquire_recursive>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	071b      	lsls	r3, r3, #28
 80056de:	d501      	bpl.n	80056e4 <_vfiprintf_r+0x34>
 80056e0:	692b      	ldr	r3, [r5, #16]
 80056e2:	b99b      	cbnz	r3, 800570c <_vfiprintf_r+0x5c>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7ff fdee 	bl	80052c8 <__swsetup_r>
 80056ec:	b170      	cbz	r0, 800570c <_vfiprintf_r+0x5c>
 80056ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056f0:	07dc      	lsls	r4, r3, #31
 80056f2:	d504      	bpl.n	80056fe <_vfiprintf_r+0x4e>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	b01d      	add	sp, #116	@ 0x74
 80056fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	0598      	lsls	r0, r3, #22
 8005702:	d4f7      	bmi.n	80056f4 <_vfiprintf_r+0x44>
 8005704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005706:	f7ff feaf 	bl	8005468 <__retarget_lock_release_recursive>
 800570a:	e7f3      	b.n	80056f4 <_vfiprintf_r+0x44>
 800570c:	2300      	movs	r3, #0
 800570e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005710:	2320      	movs	r3, #32
 8005712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005716:	f8cd 800c 	str.w	r8, [sp, #12]
 800571a:	2330      	movs	r3, #48	@ 0x30
 800571c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058cc <_vfiprintf_r+0x21c>
 8005720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005724:	f04f 0901 	mov.w	r9, #1
 8005728:	4623      	mov	r3, r4
 800572a:	469a      	mov	sl, r3
 800572c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005730:	b10a      	cbz	r2, 8005736 <_vfiprintf_r+0x86>
 8005732:	2a25      	cmp	r2, #37	@ 0x25
 8005734:	d1f9      	bne.n	800572a <_vfiprintf_r+0x7a>
 8005736:	ebba 0b04 	subs.w	fp, sl, r4
 800573a:	d00b      	beq.n	8005754 <_vfiprintf_r+0xa4>
 800573c:	465b      	mov	r3, fp
 800573e:	4622      	mov	r2, r4
 8005740:	4629      	mov	r1, r5
 8005742:	4630      	mov	r0, r6
 8005744:	f7ff ffa1 	bl	800568a <__sfputs_r>
 8005748:	3001      	adds	r0, #1
 800574a:	f000 80a7 	beq.w	800589c <_vfiprintf_r+0x1ec>
 800574e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005750:	445a      	add	r2, fp
 8005752:	9209      	str	r2, [sp, #36]	@ 0x24
 8005754:	f89a 3000 	ldrb.w	r3, [sl]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 809f 	beq.w	800589c <_vfiprintf_r+0x1ec>
 800575e:	2300      	movs	r3, #0
 8005760:	f04f 32ff 	mov.w	r2, #4294967295
 8005764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005768:	f10a 0a01 	add.w	sl, sl, #1
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005774:	931a      	str	r3, [sp, #104]	@ 0x68
 8005776:	4654      	mov	r4, sl
 8005778:	2205      	movs	r2, #5
 800577a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577e:	4853      	ldr	r0, [pc, #332]	@ (80058cc <_vfiprintf_r+0x21c>)
 8005780:	f7fa fd2e 	bl	80001e0 <memchr>
 8005784:	9a04      	ldr	r2, [sp, #16]
 8005786:	b9d8      	cbnz	r0, 80057c0 <_vfiprintf_r+0x110>
 8005788:	06d1      	lsls	r1, r2, #27
 800578a:	bf44      	itt	mi
 800578c:	2320      	movmi	r3, #32
 800578e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005792:	0713      	lsls	r3, r2, #28
 8005794:	bf44      	itt	mi
 8005796:	232b      	movmi	r3, #43	@ 0x2b
 8005798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800579c:	f89a 3000 	ldrb.w	r3, [sl]
 80057a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057a2:	d015      	beq.n	80057d0 <_vfiprintf_r+0x120>
 80057a4:	9a07      	ldr	r2, [sp, #28]
 80057a6:	4654      	mov	r4, sl
 80057a8:	2000      	movs	r0, #0
 80057aa:	f04f 0c0a 	mov.w	ip, #10
 80057ae:	4621      	mov	r1, r4
 80057b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b4:	3b30      	subs	r3, #48	@ 0x30
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	d94b      	bls.n	8005852 <_vfiprintf_r+0x1a2>
 80057ba:	b1b0      	cbz	r0, 80057ea <_vfiprintf_r+0x13a>
 80057bc:	9207      	str	r2, [sp, #28]
 80057be:	e014      	b.n	80057ea <_vfiprintf_r+0x13a>
 80057c0:	eba0 0308 	sub.w	r3, r0, r8
 80057c4:	fa09 f303 	lsl.w	r3, r9, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	46a2      	mov	sl, r4
 80057ce:	e7d2      	b.n	8005776 <_vfiprintf_r+0xc6>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	1d19      	adds	r1, r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	9103      	str	r1, [sp, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfbb      	ittet	lt
 80057dc:	425b      	neglt	r3, r3
 80057de:	f042 0202 	orrlt.w	r2, r2, #2
 80057e2:	9307      	strge	r3, [sp, #28]
 80057e4:	9307      	strlt	r3, [sp, #28]
 80057e6:	bfb8      	it	lt
 80057e8:	9204      	strlt	r2, [sp, #16]
 80057ea:	7823      	ldrb	r3, [r4, #0]
 80057ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ee:	d10a      	bne.n	8005806 <_vfiprintf_r+0x156>
 80057f0:	7863      	ldrb	r3, [r4, #1]
 80057f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f4:	d132      	bne.n	800585c <_vfiprintf_r+0x1ac>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	9203      	str	r2, [sp, #12]
 80057fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005802:	3402      	adds	r4, #2
 8005804:	9305      	str	r3, [sp, #20]
 8005806:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058dc <_vfiprintf_r+0x22c>
 800580a:	7821      	ldrb	r1, [r4, #0]
 800580c:	2203      	movs	r2, #3
 800580e:	4650      	mov	r0, sl
 8005810:	f7fa fce6 	bl	80001e0 <memchr>
 8005814:	b138      	cbz	r0, 8005826 <_vfiprintf_r+0x176>
 8005816:	9b04      	ldr	r3, [sp, #16]
 8005818:	eba0 000a 	sub.w	r0, r0, sl
 800581c:	2240      	movs	r2, #64	@ 0x40
 800581e:	4082      	lsls	r2, r0
 8005820:	4313      	orrs	r3, r2
 8005822:	3401      	adds	r4, #1
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582a:	4829      	ldr	r0, [pc, #164]	@ (80058d0 <_vfiprintf_r+0x220>)
 800582c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005830:	2206      	movs	r2, #6
 8005832:	f7fa fcd5 	bl	80001e0 <memchr>
 8005836:	2800      	cmp	r0, #0
 8005838:	d03f      	beq.n	80058ba <_vfiprintf_r+0x20a>
 800583a:	4b26      	ldr	r3, [pc, #152]	@ (80058d4 <_vfiprintf_r+0x224>)
 800583c:	bb1b      	cbnz	r3, 8005886 <_vfiprintf_r+0x1d6>
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	3307      	adds	r3, #7
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	3308      	adds	r3, #8
 8005848:	9303      	str	r3, [sp, #12]
 800584a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800584c:	443b      	add	r3, r7
 800584e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005850:	e76a      	b.n	8005728 <_vfiprintf_r+0x78>
 8005852:	fb0c 3202 	mla	r2, ip, r2, r3
 8005856:	460c      	mov	r4, r1
 8005858:	2001      	movs	r0, #1
 800585a:	e7a8      	b.n	80057ae <_vfiprintf_r+0xfe>
 800585c:	2300      	movs	r3, #0
 800585e:	3401      	adds	r4, #1
 8005860:	9305      	str	r3, [sp, #20]
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 0c0a 	mov.w	ip, #10
 8005868:	4620      	mov	r0, r4
 800586a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586e:	3a30      	subs	r2, #48	@ 0x30
 8005870:	2a09      	cmp	r2, #9
 8005872:	d903      	bls.n	800587c <_vfiprintf_r+0x1cc>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0c6      	beq.n	8005806 <_vfiprintf_r+0x156>
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	e7c4      	b.n	8005806 <_vfiprintf_r+0x156>
 800587c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005880:	4604      	mov	r4, r0
 8005882:	2301      	movs	r3, #1
 8005884:	e7f0      	b.n	8005868 <_vfiprintf_r+0x1b8>
 8005886:	ab03      	add	r3, sp, #12
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	462a      	mov	r2, r5
 800588c:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <_vfiprintf_r+0x228>)
 800588e:	a904      	add	r1, sp, #16
 8005890:	4630      	mov	r0, r6
 8005892:	f3af 8000 	nop.w
 8005896:	4607      	mov	r7, r0
 8005898:	1c78      	adds	r0, r7, #1
 800589a:	d1d6      	bne.n	800584a <_vfiprintf_r+0x19a>
 800589c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	d405      	bmi.n	80058ae <_vfiprintf_r+0x1fe>
 80058a2:	89ab      	ldrh	r3, [r5, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_vfiprintf_r+0x1fe>
 80058a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058aa:	f7ff fddd 	bl	8005468 <__retarget_lock_release_recursive>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	065b      	lsls	r3, r3, #25
 80058b2:	f53f af1f 	bmi.w	80056f4 <_vfiprintf_r+0x44>
 80058b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058b8:	e71e      	b.n	80056f8 <_vfiprintf_r+0x48>
 80058ba:	ab03      	add	r3, sp, #12
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	462a      	mov	r2, r5
 80058c0:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <_vfiprintf_r+0x228>)
 80058c2:	a904      	add	r1, sp, #16
 80058c4:	4630      	mov	r0, r6
 80058c6:	f000 f879 	bl	80059bc <_printf_i>
 80058ca:	e7e4      	b.n	8005896 <_vfiprintf_r+0x1e6>
 80058cc:	080063b0 	.word	0x080063b0
 80058d0:	080063ba 	.word	0x080063ba
 80058d4:	00000000 	.word	0x00000000
 80058d8:	0800568b 	.word	0x0800568b
 80058dc:	080063b6 	.word	0x080063b6

080058e0 <_printf_common>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	4616      	mov	r6, r2
 80058e6:	4698      	mov	r8, r3
 80058e8:	688a      	ldr	r2, [r1, #8]
 80058ea:	690b      	ldr	r3, [r1, #16]
 80058ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	bfb8      	it	lt
 80058f4:	4613      	movlt	r3, r2
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058fc:	4607      	mov	r7, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	b10a      	cbz	r2, 8005906 <_printf_common+0x26>
 8005902:	3301      	adds	r3, #1
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	0699      	lsls	r1, r3, #26
 800590a:	bf42      	ittt	mi
 800590c:	6833      	ldrmi	r3, [r6, #0]
 800590e:	3302      	addmi	r3, #2
 8005910:	6033      	strmi	r3, [r6, #0]
 8005912:	6825      	ldr	r5, [r4, #0]
 8005914:	f015 0506 	ands.w	r5, r5, #6
 8005918:	d106      	bne.n	8005928 <_printf_common+0x48>
 800591a:	f104 0a19 	add.w	sl, r4, #25
 800591e:	68e3      	ldr	r3, [r4, #12]
 8005920:	6832      	ldr	r2, [r6, #0]
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	42ab      	cmp	r3, r5
 8005926:	dc26      	bgt.n	8005976 <_printf_common+0x96>
 8005928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	3b00      	subs	r3, #0
 8005930:	bf18      	it	ne
 8005932:	2301      	movne	r3, #1
 8005934:	0692      	lsls	r2, r2, #26
 8005936:	d42b      	bmi.n	8005990 <_printf_common+0xb0>
 8005938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800593c:	4641      	mov	r1, r8
 800593e:	4638      	mov	r0, r7
 8005940:	47c8      	blx	r9
 8005942:	3001      	adds	r0, #1
 8005944:	d01e      	beq.n	8005984 <_printf_common+0xa4>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	f003 0306 	and.w	r3, r3, #6
 800594e:	2b04      	cmp	r3, #4
 8005950:	bf02      	ittt	eq
 8005952:	68e5      	ldreq	r5, [r4, #12]
 8005954:	6833      	ldreq	r3, [r6, #0]
 8005956:	1aed      	subeq	r5, r5, r3
 8005958:	68a3      	ldr	r3, [r4, #8]
 800595a:	bf0c      	ite	eq
 800595c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005960:	2500      	movne	r5, #0
 8005962:	4293      	cmp	r3, r2
 8005964:	bfc4      	itt	gt
 8005966:	1a9b      	subgt	r3, r3, r2
 8005968:	18ed      	addgt	r5, r5, r3
 800596a:	2600      	movs	r6, #0
 800596c:	341a      	adds	r4, #26
 800596e:	42b5      	cmp	r5, r6
 8005970:	d11a      	bne.n	80059a8 <_printf_common+0xc8>
 8005972:	2000      	movs	r0, #0
 8005974:	e008      	b.n	8005988 <_printf_common+0xa8>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4641      	mov	r1, r8
 800597c:	4638      	mov	r0, r7
 800597e:	47c8      	blx	r9
 8005980:	3001      	adds	r0, #1
 8005982:	d103      	bne.n	800598c <_printf_common+0xac>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	3501      	adds	r5, #1
 800598e:	e7c6      	b.n	800591e <_printf_common+0x3e>
 8005990:	18e1      	adds	r1, r4, r3
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	2030      	movs	r0, #48	@ 0x30
 8005996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800599a:	4422      	add	r2, r4
 800599c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059a4:	3302      	adds	r3, #2
 80059a6:	e7c7      	b.n	8005938 <_printf_common+0x58>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4622      	mov	r2, r4
 80059ac:	4641      	mov	r1, r8
 80059ae:	4638      	mov	r0, r7
 80059b0:	47c8      	blx	r9
 80059b2:	3001      	adds	r0, #1
 80059b4:	d0e6      	beq.n	8005984 <_printf_common+0xa4>
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7d9      	b.n	800596e <_printf_common+0x8e>
	...

080059bc <_printf_i>:
 80059bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	7e0f      	ldrb	r7, [r1, #24]
 80059c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059c4:	2f78      	cmp	r7, #120	@ 0x78
 80059c6:	4691      	mov	r9, r2
 80059c8:	4680      	mov	r8, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	469a      	mov	sl, r3
 80059ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059d2:	d807      	bhi.n	80059e4 <_printf_i+0x28>
 80059d4:	2f62      	cmp	r7, #98	@ 0x62
 80059d6:	d80a      	bhi.n	80059ee <_printf_i+0x32>
 80059d8:	2f00      	cmp	r7, #0
 80059da:	f000 80d1 	beq.w	8005b80 <_printf_i+0x1c4>
 80059de:	2f58      	cmp	r7, #88	@ 0x58
 80059e0:	f000 80b8 	beq.w	8005b54 <_printf_i+0x198>
 80059e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059ec:	e03a      	b.n	8005a64 <_printf_i+0xa8>
 80059ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059f2:	2b15      	cmp	r3, #21
 80059f4:	d8f6      	bhi.n	80059e4 <_printf_i+0x28>
 80059f6:	a101      	add	r1, pc, #4	@ (adr r1, 80059fc <_printf_i+0x40>)
 80059f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059fc:	08005a55 	.word	0x08005a55
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	080059e5 	.word	0x080059e5
 8005a08:	080059e5 	.word	0x080059e5
 8005a0c:	080059e5 	.word	0x080059e5
 8005a10:	080059e5 	.word	0x080059e5
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	080059e5 	.word	0x080059e5
 8005a1c:	080059e5 	.word	0x080059e5
 8005a20:	080059e5 	.word	0x080059e5
 8005a24:	080059e5 	.word	0x080059e5
 8005a28:	08005b67 	.word	0x08005b67
 8005a2c:	08005a93 	.word	0x08005a93
 8005a30:	08005b21 	.word	0x08005b21
 8005a34:	080059e5 	.word	0x080059e5
 8005a38:	080059e5 	.word	0x080059e5
 8005a3c:	08005b89 	.word	0x08005b89
 8005a40:	080059e5 	.word	0x080059e5
 8005a44:	08005a93 	.word	0x08005a93
 8005a48:	080059e5 	.word	0x080059e5
 8005a4c:	080059e5 	.word	0x080059e5
 8005a50:	08005b29 	.word	0x08005b29
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6032      	str	r2, [r6, #0]
 8005a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a64:	2301      	movs	r3, #1
 8005a66:	e09c      	b.n	8005ba2 <_printf_i+0x1e6>
 8005a68:	6833      	ldr	r3, [r6, #0]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	6031      	str	r1, [r6, #0]
 8005a70:	0606      	lsls	r6, r0, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0xbc>
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	e003      	b.n	8005a80 <_printf_i+0xc4>
 8005a78:	0645      	lsls	r5, r0, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0xb8>
 8005a7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	da03      	bge.n	8005a8c <_printf_i+0xd0>
 8005a84:	232d      	movs	r3, #45	@ 0x2d
 8005a86:	426d      	negs	r5, r5
 8005a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a8c:	4858      	ldr	r0, [pc, #352]	@ (8005bf0 <_printf_i+0x234>)
 8005a8e:	230a      	movs	r3, #10
 8005a90:	e011      	b.n	8005ab6 <_printf_i+0xfa>
 8005a92:	6821      	ldr	r1, [r4, #0]
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	0608      	lsls	r0, r1, #24
 8005a98:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a9c:	d402      	bmi.n	8005aa4 <_printf_i+0xe8>
 8005a9e:	0649      	lsls	r1, r1, #25
 8005aa0:	bf48      	it	mi
 8005aa2:	b2ad      	uxthmi	r5, r5
 8005aa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aa6:	4852      	ldr	r0, [pc, #328]	@ (8005bf0 <_printf_i+0x234>)
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	bf14      	ite	ne
 8005aac:	230a      	movne	r3, #10
 8005aae:	2308      	moveq	r3, #8
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ab6:	6866      	ldr	r6, [r4, #4]
 8005ab8:	60a6      	str	r6, [r4, #8]
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	db05      	blt.n	8005aca <_printf_i+0x10e>
 8005abe:	6821      	ldr	r1, [r4, #0]
 8005ac0:	432e      	orrs	r6, r5
 8005ac2:	f021 0104 	bic.w	r1, r1, #4
 8005ac6:	6021      	str	r1, [r4, #0]
 8005ac8:	d04b      	beq.n	8005b62 <_printf_i+0x1a6>
 8005aca:	4616      	mov	r6, r2
 8005acc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ad0:	fb03 5711 	mls	r7, r3, r1, r5
 8005ad4:	5dc7      	ldrb	r7, [r0, r7]
 8005ad6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ada:	462f      	mov	r7, r5
 8005adc:	42bb      	cmp	r3, r7
 8005ade:	460d      	mov	r5, r1
 8005ae0:	d9f4      	bls.n	8005acc <_printf_i+0x110>
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d10b      	bne.n	8005afe <_printf_i+0x142>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	07df      	lsls	r7, r3, #31
 8005aea:	d508      	bpl.n	8005afe <_printf_i+0x142>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	6861      	ldr	r1, [r4, #4]
 8005af0:	4299      	cmp	r1, r3
 8005af2:	bfde      	ittt	le
 8005af4:	2330      	movle	r3, #48	@ 0x30
 8005af6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005afa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005afe:	1b92      	subs	r2, r2, r6
 8005b00:	6122      	str	r2, [r4, #16]
 8005b02:	f8cd a000 	str.w	sl, [sp]
 8005b06:	464b      	mov	r3, r9
 8005b08:	aa03      	add	r2, sp, #12
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	f7ff fee7 	bl	80058e0 <_printf_common>
 8005b12:	3001      	adds	r0, #1
 8005b14:	d14a      	bne.n	8005bac <_printf_i+0x1f0>
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	b004      	add	sp, #16
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f043 0320 	orr.w	r3, r3, #32
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	4832      	ldr	r0, [pc, #200]	@ (8005bf4 <_printf_i+0x238>)
 8005b2a:	2778      	movs	r7, #120	@ 0x78
 8005b2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6831      	ldr	r1, [r6, #0]
 8005b34:	061f      	lsls	r7, r3, #24
 8005b36:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b3a:	d402      	bmi.n	8005b42 <_printf_i+0x186>
 8005b3c:	065f      	lsls	r7, r3, #25
 8005b3e:	bf48      	it	mi
 8005b40:	b2ad      	uxthmi	r5, r5
 8005b42:	6031      	str	r1, [r6, #0]
 8005b44:	07d9      	lsls	r1, r3, #31
 8005b46:	bf44      	itt	mi
 8005b48:	f043 0320 	orrmi.w	r3, r3, #32
 8005b4c:	6023      	strmi	r3, [r4, #0]
 8005b4e:	b11d      	cbz	r5, 8005b58 <_printf_i+0x19c>
 8005b50:	2310      	movs	r3, #16
 8005b52:	e7ad      	b.n	8005ab0 <_printf_i+0xf4>
 8005b54:	4826      	ldr	r0, [pc, #152]	@ (8005bf0 <_printf_i+0x234>)
 8005b56:	e7e9      	b.n	8005b2c <_printf_i+0x170>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	f023 0320 	bic.w	r3, r3, #32
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	e7f6      	b.n	8005b50 <_printf_i+0x194>
 8005b62:	4616      	mov	r6, r2
 8005b64:	e7bd      	b.n	8005ae2 <_printf_i+0x126>
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	6825      	ldr	r5, [r4, #0]
 8005b6a:	6961      	ldr	r1, [r4, #20]
 8005b6c:	1d18      	adds	r0, r3, #4
 8005b6e:	6030      	str	r0, [r6, #0]
 8005b70:	062e      	lsls	r6, r5, #24
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	d501      	bpl.n	8005b7a <_printf_i+0x1be>
 8005b76:	6019      	str	r1, [r3, #0]
 8005b78:	e002      	b.n	8005b80 <_printf_i+0x1c4>
 8005b7a:	0668      	lsls	r0, r5, #25
 8005b7c:	d5fb      	bpl.n	8005b76 <_printf_i+0x1ba>
 8005b7e:	8019      	strh	r1, [r3, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	4616      	mov	r6, r2
 8005b86:	e7bc      	b.n	8005b02 <_printf_i+0x146>
 8005b88:	6833      	ldr	r3, [r6, #0]
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	6032      	str	r2, [r6, #0]
 8005b8e:	681e      	ldr	r6, [r3, #0]
 8005b90:	6862      	ldr	r2, [r4, #4]
 8005b92:	2100      	movs	r1, #0
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7fa fb23 	bl	80001e0 <memchr>
 8005b9a:	b108      	cbz	r0, 8005ba0 <_printf_i+0x1e4>
 8005b9c:	1b80      	subs	r0, r0, r6
 8005b9e:	6060      	str	r0, [r4, #4]
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005baa:	e7aa      	b.n	8005b02 <_printf_i+0x146>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	4632      	mov	r2, r6
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	47d0      	blx	sl
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0ad      	beq.n	8005b16 <_printf_i+0x15a>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	079b      	lsls	r3, r3, #30
 8005bbe:	d413      	bmi.n	8005be8 <_printf_i+0x22c>
 8005bc0:	68e0      	ldr	r0, [r4, #12]
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	4298      	cmp	r0, r3
 8005bc6:	bfb8      	it	lt
 8005bc8:	4618      	movlt	r0, r3
 8005bca:	e7a6      	b.n	8005b1a <_printf_i+0x15e>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4632      	mov	r2, r6
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	47d0      	blx	sl
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d09d      	beq.n	8005b16 <_printf_i+0x15a>
 8005bda:	3501      	adds	r5, #1
 8005bdc:	68e3      	ldr	r3, [r4, #12]
 8005bde:	9903      	ldr	r1, [sp, #12]
 8005be0:	1a5b      	subs	r3, r3, r1
 8005be2:	42ab      	cmp	r3, r5
 8005be4:	dcf2      	bgt.n	8005bcc <_printf_i+0x210>
 8005be6:	e7eb      	b.n	8005bc0 <_printf_i+0x204>
 8005be8:	2500      	movs	r5, #0
 8005bea:	f104 0619 	add.w	r6, r4, #25
 8005bee:	e7f5      	b.n	8005bdc <_printf_i+0x220>
 8005bf0:	080063c1 	.word	0x080063c1
 8005bf4:	080063d2 	.word	0x080063d2

08005bf8 <__sflush_r>:
 8005bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c00:	0716      	lsls	r6, r2, #28
 8005c02:	4605      	mov	r5, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	d454      	bmi.n	8005cb2 <__sflush_r+0xba>
 8005c08:	684b      	ldr	r3, [r1, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dc02      	bgt.n	8005c14 <__sflush_r+0x1c>
 8005c0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd48      	ble.n	8005ca6 <__sflush_r+0xae>
 8005c14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	d045      	beq.n	8005ca6 <__sflush_r+0xae>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c20:	682f      	ldr	r7, [r5, #0]
 8005c22:	6a21      	ldr	r1, [r4, #32]
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	d030      	beq.n	8005c8a <__sflush_r+0x92>
 8005c28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	0759      	lsls	r1, r3, #29
 8005c2e:	d505      	bpl.n	8005c3c <__sflush_r+0x44>
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c36:	b10b      	cbz	r3, 8005c3c <__sflush_r+0x44>
 8005c38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c40:	6a21      	ldr	r1, [r4, #32]
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b0      	blx	r6
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	d106      	bne.n	8005c5a <__sflush_r+0x62>
 8005c4c:	6829      	ldr	r1, [r5, #0]
 8005c4e:	291d      	cmp	r1, #29
 8005c50:	d82b      	bhi.n	8005caa <__sflush_r+0xb2>
 8005c52:	4a2a      	ldr	r2, [pc, #168]	@ (8005cfc <__sflush_r+0x104>)
 8005c54:	40ca      	lsrs	r2, r1
 8005c56:	07d6      	lsls	r6, r2, #31
 8005c58:	d527      	bpl.n	8005caa <__sflush_r+0xb2>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6062      	str	r2, [r4, #4]
 8005c5e:	04d9      	lsls	r1, r3, #19
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	6022      	str	r2, [r4, #0]
 8005c64:	d504      	bpl.n	8005c70 <__sflush_r+0x78>
 8005c66:	1c42      	adds	r2, r0, #1
 8005c68:	d101      	bne.n	8005c6e <__sflush_r+0x76>
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	b903      	cbnz	r3, 8005c70 <__sflush_r+0x78>
 8005c6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c72:	602f      	str	r7, [r5, #0]
 8005c74:	b1b9      	cbz	r1, 8005ca6 <__sflush_r+0xae>
 8005c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	d002      	beq.n	8005c84 <__sflush_r+0x8c>
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7ff fbf4 	bl	800546c <_free_r>
 8005c84:	2300      	movs	r3, #0
 8005c86:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c88:	e00d      	b.n	8005ca6 <__sflush_r+0xae>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b0      	blx	r6
 8005c90:	4602      	mov	r2, r0
 8005c92:	1c50      	adds	r0, r2, #1
 8005c94:	d1c9      	bne.n	8005c2a <__sflush_r+0x32>
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0c6      	beq.n	8005c2a <__sflush_r+0x32>
 8005c9c:	2b1d      	cmp	r3, #29
 8005c9e:	d001      	beq.n	8005ca4 <__sflush_r+0xac>
 8005ca0:	2b16      	cmp	r3, #22
 8005ca2:	d11e      	bne.n	8005ce2 <__sflush_r+0xea>
 8005ca4:	602f      	str	r7, [r5, #0]
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e022      	b.n	8005cf0 <__sflush_r+0xf8>
 8005caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cae:	b21b      	sxth	r3, r3
 8005cb0:	e01b      	b.n	8005cea <__sflush_r+0xf2>
 8005cb2:	690f      	ldr	r7, [r1, #16]
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	d0f6      	beq.n	8005ca6 <__sflush_r+0xae>
 8005cb8:	0793      	lsls	r3, r2, #30
 8005cba:	680e      	ldr	r6, [r1, #0]
 8005cbc:	bf08      	it	eq
 8005cbe:	694b      	ldreq	r3, [r1, #20]
 8005cc0:	600f      	str	r7, [r1, #0]
 8005cc2:	bf18      	it	ne
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	eba6 0807 	sub.w	r8, r6, r7
 8005cca:	608b      	str	r3, [r1, #8]
 8005ccc:	f1b8 0f00 	cmp.w	r8, #0
 8005cd0:	dde9      	ble.n	8005ca6 <__sflush_r+0xae>
 8005cd2:	6a21      	ldr	r1, [r4, #32]
 8005cd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cd6:	4643      	mov	r3, r8
 8005cd8:	463a      	mov	r2, r7
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b0      	blx	r6
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	dc08      	bgt.n	8005cf4 <__sflush_r+0xfc>
 8005ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf4:	4407      	add	r7, r0
 8005cf6:	eba8 0800 	sub.w	r8, r8, r0
 8005cfa:	e7e7      	b.n	8005ccc <__sflush_r+0xd4>
 8005cfc:	20400001 	.word	0x20400001

08005d00 <_fflush_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	690b      	ldr	r3, [r1, #16]
 8005d04:	4605      	mov	r5, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b913      	cbnz	r3, 8005d10 <_fflush_r+0x10>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	b118      	cbz	r0, 8005d1a <_fflush_r+0x1a>
 8005d12:	6a03      	ldr	r3, [r0, #32]
 8005d14:	b90b      	cbnz	r3, 8005d1a <_fflush_r+0x1a>
 8005d16:	f7ff f9a7 	bl	8005068 <__sinit>
 8005d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f3      	beq.n	8005d0a <_fflush_r+0xa>
 8005d22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d24:	07d0      	lsls	r0, r2, #31
 8005d26:	d404      	bmi.n	8005d32 <_fflush_r+0x32>
 8005d28:	0599      	lsls	r1, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_fflush_r+0x32>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d2e:	f7ff fb9a 	bl	8005466 <__retarget_lock_acquire_recursive>
 8005d32:	4628      	mov	r0, r5
 8005d34:	4621      	mov	r1, r4
 8005d36:	f7ff ff5f 	bl	8005bf8 <__sflush_r>
 8005d3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d3c:	07da      	lsls	r2, r3, #31
 8005d3e:	4605      	mov	r5, r0
 8005d40:	d4e4      	bmi.n	8005d0c <_fflush_r+0xc>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	059b      	lsls	r3, r3, #22
 8005d46:	d4e1      	bmi.n	8005d0c <_fflush_r+0xc>
 8005d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d4a:	f7ff fb8d 	bl	8005468 <__retarget_lock_release_recursive>
 8005d4e:	e7dd      	b.n	8005d0c <_fflush_r+0xc>

08005d50 <__swhatbuf_r>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	b096      	sub	sp, #88	@ 0x58
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	461e      	mov	r6, r3
 8005d60:	da0d      	bge.n	8005d7e <__swhatbuf_r+0x2e>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2340      	movne	r3, #64	@ 0x40
 8005d70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d74:	2000      	movs	r0, #0
 8005d76:	6031      	str	r1, [r6, #0]
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	b016      	add	sp, #88	@ 0x58
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	466a      	mov	r2, sp
 8005d80:	f000 f87c 	bl	8005e7c <_fstat_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dbec      	blt.n	8005d62 <__swhatbuf_r+0x12>
 8005d88:	9901      	ldr	r1, [sp, #4]
 8005d8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d92:	4259      	negs	r1, r3
 8005d94:	4159      	adcs	r1, r3
 8005d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d9a:	e7eb      	b.n	8005d74 <__swhatbuf_r+0x24>

08005d9c <__smakebuf_r>:
 8005d9c:	898b      	ldrh	r3, [r1, #12]
 8005d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da0:	079d      	lsls	r5, r3, #30
 8005da2:	4606      	mov	r6, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	d507      	bpl.n	8005db8 <__smakebuf_r+0x1c>
 8005da8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	2301      	movs	r3, #1
 8005db2:	6163      	str	r3, [r4, #20]
 8005db4:	b003      	add	sp, #12
 8005db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db8:	ab01      	add	r3, sp, #4
 8005dba:	466a      	mov	r2, sp
 8005dbc:	f7ff ffc8 	bl	8005d50 <__swhatbuf_r>
 8005dc0:	9f00      	ldr	r7, [sp, #0]
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7ff fbbc 	bl	8005544 <_malloc_r>
 8005dcc:	b948      	cbnz	r0, 8005de2 <__smakebuf_r+0x46>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	059a      	lsls	r2, r3, #22
 8005dd4:	d4ee      	bmi.n	8005db4 <__smakebuf_r+0x18>
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	f043 0302 	orr.w	r3, r3, #2
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	e7e2      	b.n	8005da8 <__smakebuf_r+0xc>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	6020      	str	r0, [r4, #0]
 8005de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	9b01      	ldr	r3, [sp, #4]
 8005dee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005df2:	b15b      	cbz	r3, 8005e0c <__smakebuf_r+0x70>
 8005df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f851 	bl	8005ea0 <_isatty_r>
 8005dfe:	b128      	cbz	r0, 8005e0c <__smakebuf_r+0x70>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	431d      	orrs	r5, r3
 8005e10:	81a5      	strh	r5, [r4, #12]
 8005e12:	e7cf      	b.n	8005db4 <__smakebuf_r+0x18>

08005e14 <_putc_r>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	460d      	mov	r5, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	b118      	cbz	r0, 8005e26 <_putc_r+0x12>
 8005e1e:	6a03      	ldr	r3, [r0, #32]
 8005e20:	b90b      	cbnz	r3, 8005e26 <_putc_r+0x12>
 8005e22:	f7ff f921 	bl	8005068 <__sinit>
 8005e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e28:	07d8      	lsls	r0, r3, #31
 8005e2a:	d405      	bmi.n	8005e38 <_putc_r+0x24>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	0599      	lsls	r1, r3, #22
 8005e30:	d402      	bmi.n	8005e38 <_putc_r+0x24>
 8005e32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e34:	f7ff fb17 	bl	8005466 <__retarget_lock_acquire_recursive>
 8005e38:	68a3      	ldr	r3, [r4, #8]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	da05      	bge.n	8005e4e <_putc_r+0x3a>
 8005e42:	69a2      	ldr	r2, [r4, #24]
 8005e44:	4293      	cmp	r3, r2
 8005e46:	db12      	blt.n	8005e6e <_putc_r+0x5a>
 8005e48:	b2eb      	uxtb	r3, r5
 8005e4a:	2b0a      	cmp	r3, #10
 8005e4c:	d00f      	beq.n	8005e6e <_putc_r+0x5a>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	701d      	strb	r5, [r3, #0]
 8005e56:	b2ed      	uxtb	r5, r5
 8005e58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e5a:	07da      	lsls	r2, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_putc_r+0x56>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	059b      	lsls	r3, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_putc_r+0x56>
 8005e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e66:	f7ff faff 	bl	8005468 <__retarget_lock_release_recursive>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4622      	mov	r2, r4
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff f9e9 	bl	800524a <__swbuf_r>
 8005e78:	4605      	mov	r5, r0
 8005e7a:	e7ed      	b.n	8005e58 <_putc_r+0x44>

08005e7c <_fstat_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d07      	ldr	r5, [pc, #28]	@ (8005e9c <_fstat_r+0x20>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	f7fb fcfa 	bl	8001882 <_fstat>
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d102      	bne.n	8005e98 <_fstat_r+0x1c>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	b103      	cbz	r3, 8005e98 <_fstat_r+0x1c>
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000998c 	.word	0x2000998c

08005ea0 <_isatty_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	@ (8005ebc <_isatty_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fb fcf9 	bl	80018a2 <_isatty>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_isatty_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_isatty_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	2000998c 	.word	0x2000998c

08005ec0 <_sbrk_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d06      	ldr	r5, [pc, #24]	@ (8005edc <_sbrk_r+0x1c>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fb fd02 	bl	80018d4 <_sbrk>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_sbrk_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_sbrk_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	2000998c 	.word	0x2000998c

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
